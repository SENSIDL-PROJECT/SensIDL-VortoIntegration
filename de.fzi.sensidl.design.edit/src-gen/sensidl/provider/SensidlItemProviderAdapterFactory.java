/**
 */
package sensidl.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import sensidl.util.SensidlAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SensidlItemProviderAdapterFactory extends SensidlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SensidlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.DataModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataModelItemProvider dataModelItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.DataModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataModelAdapter() {
		if (dataModelItemProvider == null) {
			dataModelItemProvider = new DataModelItemProvider(this);
		}

		return dataModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.Representation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepresentationItemProvider representationItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.Representation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepresentationAdapter() {
		if (representationItemProvider == null) {
			representationItemProvider = new RepresentationItemProvider(this);
		}

		return representationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.Calculated} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalculatedItemProvider calculatedItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.Calculated}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalculatedAdapter() {
		if (calculatedItemProvider == null) {
			calculatedItemProvider = new CalculatedItemProvider(this);
		}

		return calculatedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.ConstantData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantDataItemProvider constantDataItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.ConstantData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantDataAdapter() {
		if (constantDataItemProvider == null) {
			constantDataItemProvider = new ConstantDataItemProvider(this);
		}

		return constantDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.MeasuredData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeasuredDataItemProvider measuredDataItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.MeasuredData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeasuredDataAdapter() {
		if (measuredDataItemProvider == null) {
			measuredDataItemProvider = new MeasuredDataItemProvider(this);
		}

		return measuredDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.Datastructure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatastructureItemProvider datastructureItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.Datastructure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatastructureAdapter() {
		if (datastructureItemProvider == null) {
			datastructureItemProvider = new DatastructureItemProvider(this);
		}

		return datastructureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.Options} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionsItemProvider optionsItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.Options}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionsAdapter() {
		if (optionsItemProvider == null) {
			optionsItemProvider = new OptionsItemProvider(this);
		}

		return optionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.DataRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataRangeItemProvider dataRangeItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.DataRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataRangeAdapter() {
		if (dataRangeItemProvider == null) {
			dataRangeItemProvider = new DataRangeItemProvider(this);
		}

		return dataRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.Bound} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundItemProvider boundItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.Bound}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundAdapter() {
		if (boundItemProvider == null) {
			boundItemProvider = new BoundItemProvider(this);
		}

		return boundItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.DataAdaption} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataAdaptionItemProvider dataAdaptionItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.DataAdaption}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataAdaptionAdapter() {
		if (dataAdaptionItemProvider == null) {
			dataAdaptionItemProvider = new DataAdaptionItemProvider(this);
		}

		return dataAdaptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.NonMeasuredData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonMeasuredDataItemProvider nonMeasuredDataItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.NonMeasuredData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNonMeasuredDataAdapter() {
		if (nonMeasuredDataItemProvider == null) {
			nonMeasuredDataItemProvider = new NonMeasuredDataItemProvider(this);
		}

		return nonMeasuredDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.DatastructureDeclaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatastructureDeclarationItemProvider datastructureDeclarationItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.DatastructureDeclaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatastructureDeclarationAdapter() {
		if (datastructureDeclarationItemProvider == null) {
			datastructureDeclarationItemProvider = new DatastructureDeclarationItemProvider(this);
		}

		return datastructureDeclarationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link sensidl.Declaration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarationItemProvider declarationItemProvider;

	/**
	 * This creates an adapter for a {@link sensidl.Declaration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarationAdapter() {
		if (declarationItemProvider == null) {
			declarationItemProvider = new DeclarationItemProvider(this);
		}

		return declarationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (dataModelItemProvider != null) dataModelItemProvider.dispose();
		if (representationItemProvider != null) representationItemProvider.dispose();
		if (calculatedItemProvider != null) calculatedItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (constantDataItemProvider != null) constantDataItemProvider.dispose();
		if (measuredDataItemProvider != null) measuredDataItemProvider.dispose();
		if (datastructureItemProvider != null) datastructureItemProvider.dispose();
		if (optionsItemProvider != null) optionsItemProvider.dispose();
		if (dataRangeItemProvider != null) dataRangeItemProvider.dispose();
		if (boundItemProvider != null) boundItemProvider.dispose();
		if (dataAdaptionItemProvider != null) dataAdaptionItemProvider.dispose();
		if (nonMeasuredDataItemProvider != null) nonMeasuredDataItemProvider.dispose();
		if (datastructureDeclarationItemProvider != null) datastructureDeclarationItemProvider.dispose();
		if (declarationItemProvider != null) declarationItemProvider.dispose();
	}

}
