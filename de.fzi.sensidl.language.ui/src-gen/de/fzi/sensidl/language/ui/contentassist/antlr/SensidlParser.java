/*
* generated by Xtext
*/
package de.fzi.sensidl.language.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.fzi.sensidl.language.services.SensidlGrammarAccess;

public class SensidlParser extends AbstractContentAssistParser {
	
	@Inject
	private SensidlGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.fzi.sensidl.language.ui.contentassist.antlr.internal.InternalSensidlParser createParser() {
		de.fzi.sensidl.language.ui.contentassist.antlr.internal.InternalSensidlParser result = new de.fzi.sensidl.language.ui.contentassist.antlr.internal.InternalSensidlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDataModelAccess().getAlternatives_4(), "rule__DataModel__Alternatives_4");
					put(grammarAccess.getOptionsAccess().getAlternatives_1(), "rule__Options__Alternatives_1");
					put(grammarAccess.getRepresentationAccess().getAlternatives_0(), "rule__Representation__Alternatives_0");
					put(grammarAccess.getRepresentationAccess().getAlternatives_6(), "rule__Representation__Alternatives_6");
					put(grammarAccess.getInterpretationAccess().getAlternatives(), "rule__Interpretation__Alternatives");
					put(grammarAccess.getCalculatedAccess().getAlternatives_0(), "rule__Calculated__Alternatives_0");
					put(grammarAccess.getGenerationLanguageAccess().getAlternatives(), "rule__GenerationLanguage__Alternatives");
					put(grammarAccess.getTransmissionTypeAccess().getAlternatives(), "rule__TransmissionType__Alternatives");
					put(grammarAccess.getQuantityAccess().getAlternatives(), "rule__Quantity__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getDataModelAccess().getGroup(), "rule__DataModel__Group__0");
					put(grammarAccess.getDataModelAccess().getGroup_7(), "rule__DataModel__Group_7__0");
					put(grammarAccess.getOptionsAccess().getGroup(), "rule__Options__Group__0");
					put(grammarAccess.getOptionsAccess().getGroup_1_0(), "rule__Options__Group_1_0__0");
					put(grammarAccess.getOptionsAccess().getGroup_1_1(), "rule__Options__Group_1_1__0");
					put(grammarAccess.getOptionsAccess().getGroup_1_2(), "rule__Options__Group_1_2__0");
					put(grammarAccess.getRepresentationAccess().getGroup(), "rule__Representation__Group__0");
					put(grammarAccess.getCalculatedAccess().getGroup(), "rule__Calculated__Group__0");
					put(grammarAccess.getCalculatedAccess().getGroup_6(), "rule__Calculated__Group_6__0");
					put(grammarAccess.getCalculatedAccess().getGroup_9(), "rule__Calculated__Group_9__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_2(), "rule__Parameter__Group_2__0");
					put(grammarAccess.getInterpretationGroupAccess().getGroup(), "rule__InterpretationGroup__Group__0");
					put(grammarAccess.getMeasurementAccess().getGroup(), "rule__Measurement__Group__0");
					put(grammarAccess.getMeasurementInRangeAccess().getGroup(), "rule__MeasurementInRange__Group__0");
					put(grammarAccess.getMeasureAccess().getGroup(), "rule__Measure__Group__0");
					put(grammarAccess.getPrimitiveInterpretationAccess().getGroup(), "rule__PrimitiveInterpretation__Group__0");
					put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup(), "rule__DOUBLE__Group__0");
					put(grammarAccess.getDOUBLEAccess().getGroup_1(), "rule__DOUBLE__Group_1__0");
					put(grammarAccess.getDataModelAccess().getOptionsAssignment_2(), "rule__DataModel__OptionsAssignment_2");
					put(grammarAccess.getDataModelAccess().getRepresentationsAssignment_4_0(), "rule__DataModel__RepresentationsAssignment_4_0");
					put(grammarAccess.getDataModelAccess().getInterpretationsAssignment_4_1(), "rule__DataModel__InterpretationsAssignment_4_1");
					put(grammarAccess.getDataModelAccess().getTransmitAssignment_6(), "rule__DataModel__TransmitAssignment_6");
					put(grammarAccess.getDataModelAccess().getTransmitAssignment_7_1(), "rule__DataModel__TransmitAssignment_7_1");
					put(grammarAccess.getOptionsAccess().getTransmissionTypeAssignment_1_0_3(), "rule__Options__TransmissionTypeAssignment_1_0_3");
					put(grammarAccess.getOptionsAccess().getSensorLanguageAssignment_1_1_3(), "rule__Options__SensorLanguageAssignment_1_1_3");
					put(grammarAccess.getOptionsAccess().getReceiverLanguageAssignment_1_2_3(), "rule__Options__ReceiverLanguageAssignment_1_2_3");
					put(grammarAccess.getRepresentationAccess().getNameAssignment_1(), "rule__Representation__NameAssignment_1");
					put(grammarAccess.getRepresentationAccess().getTypeAssignment_3(), "rule__Representation__TypeAssignment_3");
					put(grammarAccess.getRepresentationAccess().getByteCountAssignment_5(), "rule__Representation__ByteCountAssignment_5");
					put(grammarAccess.getCalculatedAccess().getNameAssignment_1(), "rule__Calculated__NameAssignment_1");
					put(grammarAccess.getCalculatedAccess().getRepresentationAssignment_3(), "rule__Calculated__RepresentationAssignment_3");
					put(grammarAccess.getCalculatedAccess().getMethodNameAssignment_5(), "rule__Calculated__MethodNameAssignment_5");
					put(grammarAccess.getCalculatedAccess().getMethodNameOutAssignment_6_1(), "rule__Calculated__MethodNameOutAssignment_6_1");
					put(grammarAccess.getCalculatedAccess().getParameterAssignment_8(), "rule__Calculated__ParameterAssignment_8");
					put(grammarAccess.getCalculatedAccess().getParameterAssignment_9_1(), "rule__Calculated__ParameterAssignment_9_1");
					put(grammarAccess.getParameterAccess().getInterpretationAssignment_1(), "rule__Parameter__InterpretationAssignment_1");
					put(grammarAccess.getParameterAccess().getArgumentTypeAssignment_2_1(), "rule__Parameter__ArgumentTypeAssignment_2_1");
					put(grammarAccess.getInterpretationGroupAccess().getNameAssignment_1(), "rule__InterpretationGroup__NameAssignment_1");
					put(grammarAccess.getInterpretationGroupAccess().getInterpretationsAssignment_3(), "rule__InterpretationGroup__InterpretationsAssignment_3");
					put(grammarAccess.getMeasurementAccess().getQuantityAssignment_2(), "rule__Measurement__QuantityAssignment_2");
					put(grammarAccess.getMeasurementAccess().getNameAssignment_3(), "rule__Measurement__NameAssignment_3");
					put(grammarAccess.getMeasurementAccess().getScaleAssignment_5(), "rule__Measurement__ScaleAssignment_5");
					put(grammarAccess.getMeasurementAccess().getUnitAssignment_6(), "rule__Measurement__UnitAssignment_6");
					put(grammarAccess.getMeasurementAccess().getRepresentationAssignment_8(), "rule__Measurement__RepresentationAssignment_8");
					put(grammarAccess.getMeasurementAccess().getConstraintsAssignment_9(), "rule__Measurement__ConstraintsAssignment_9");
					put(grammarAccess.getMeasurementInRangeAccess().getLowerBoundAssignment_1(), "rule__MeasurementInRange__LowerBoundAssignment_1");
					put(grammarAccess.getMeasurementInRangeAccess().getUpperBoundAssignment_3(), "rule__MeasurementInRange__UpperBoundAssignment_3");
					put(grammarAccess.getMeasureAccess().getValueAssignment_0(), "rule__Measure__ValueAssignment_0");
					put(grammarAccess.getMeasureAccess().getUnitAssignment_1(), "rule__Measure__UnitAssignment_1");
					put(grammarAccess.getPrimitiveInterpretationAccess().getTypeAssignment_1(), "rule__PrimitiveInterpretation__TypeAssignment_1");
					put(grammarAccess.getPrimitiveInterpretationAccess().getNameAssignment_2(), "rule__PrimitiveInterpretation__NameAssignment_2");
					put(grammarAccess.getPrimitiveInterpretationAccess().getRepresentationAssignment_4(), "rule__PrimitiveInterpretation__RepresentationAssignment_4");
					put(grammarAccess.getConstantAccess().getNameAssignment_1(), "rule__Constant__NameAssignment_1");
					put(grammarAccess.getConstantAccess().getRepresentationAssignment_3(), "rule__Constant__RepresentationAssignment_3");
					put(grammarAccess.getConstantAccess().getConstantValueAssignment_5(), "rule__Constant__ConstantValueAssignment_5");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.fzi.sensidl.language.ui.contentassist.antlr.internal.InternalSensidlParser typedParser = (de.fzi.sensidl.language.ui.contentassist.antlr.internal.InternalSensidlParser) parser;
			typedParser.entryRuleDataModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SensidlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SensidlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
