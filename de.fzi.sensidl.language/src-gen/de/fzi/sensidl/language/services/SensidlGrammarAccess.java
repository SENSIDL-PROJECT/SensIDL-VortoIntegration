/*
* generated by Xtext
*/
package de.fzi.sensidl.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SensidlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOptionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptionsOptionsParserRuleCall_2_0 = (RuleCall)cOptionsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cRepresentationsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cRepresentationsRepresentationParserRuleCall_4_0_0 = (RuleCall)cRepresentationsAssignment_4_0.eContents().get(0);
		private final Assignment cInterpretationsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cInterpretationsInterpretationParserRuleCall_4_1_0 = (RuleCall)cInterpretationsAssignment_4_1.eContents().get(0);
		private final Keyword cTransmitKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTransmitAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTransmitInterpretationCrossReference_6_0 = (CrossReference)cTransmitAssignment_6.eContents().get(0);
		private final RuleCall cTransmitInterpretationIDTerminalRuleCall_6_0_1 = (RuleCall)cTransmitInterpretationCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTransmitAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cTransmitInterpretationCrossReference_7_1_0 = (CrossReference)cTransmitAssignment_7_1.eContents().get(0);
		private final RuleCall cTransmitInterpretationIDTerminalRuleCall_7_1_0_1 = (RuleCall)cTransmitInterpretationCrossReference_7_1_0.eContents().get(1);
		
		//DataModel:
		//	"options" "{" options=Options "}" (representations+=Representation | interpretations+=Interpretation)* "transmit"
		//	transmit+=[Interpretation] ("," transmit+=[Interpretation])*;
		public ParserRule getRule() { return rule; }

		//"options" "{" options=Options "}" (representations+=Representation | interpretations+=Interpretation)* "transmit"
		//transmit+=[Interpretation] ("," transmit+=[Interpretation])*
		public Group getGroup() { return cGroup; }

		//"options"
		public Keyword getOptionsKeyword_0() { return cOptionsKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//options=Options
		public Assignment getOptionsAssignment_2() { return cOptionsAssignment_2; }

		//Options
		public RuleCall getOptionsOptionsParserRuleCall_2_0() { return cOptionsOptionsParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }

		//(representations+=Representation | interpretations+=Interpretation)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//representations+=Representation
		public Assignment getRepresentationsAssignment_4_0() { return cRepresentationsAssignment_4_0; }

		//Representation
		public RuleCall getRepresentationsRepresentationParserRuleCall_4_0_0() { return cRepresentationsRepresentationParserRuleCall_4_0_0; }

		//interpretations+=Interpretation
		public Assignment getInterpretationsAssignment_4_1() { return cInterpretationsAssignment_4_1; }

		//Interpretation
		public RuleCall getInterpretationsInterpretationParserRuleCall_4_1_0() { return cInterpretationsInterpretationParserRuleCall_4_1_0; }

		//"transmit"
		public Keyword getTransmitKeyword_5() { return cTransmitKeyword_5; }

		//transmit+=[Interpretation]
		public Assignment getTransmitAssignment_6() { return cTransmitAssignment_6; }

		//[Interpretation]
		public CrossReference getTransmitInterpretationCrossReference_6_0() { return cTransmitInterpretationCrossReference_6_0; }

		//ID
		public RuleCall getTransmitInterpretationIDTerminalRuleCall_6_0_1() { return cTransmitInterpretationIDTerminalRuleCall_6_0_1; }

		//("," transmit+=[Interpretation])*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//transmit+=[Interpretation]
		public Assignment getTransmitAssignment_7_1() { return cTransmitAssignment_7_1; }

		//[Interpretation]
		public CrossReference getTransmitInterpretationCrossReference_7_1_0() { return cTransmitInterpretationCrossReference_7_1_0; }

		//ID
		public RuleCall getTransmitInterpretationIDTerminalRuleCall_7_1_0_1() { return cTransmitInterpretationIDTerminalRuleCall_7_1_0_1; }
	}

	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cTransmissionKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cTypeKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cTransmissionTypeAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cTransmissionTypeTransmissionParserRuleCall_1_0_3_0 = (RuleCall)cTransmissionTypeAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cSensorKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLanguageKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cSensorLanguageAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cSensorLanguageGenerationLanguageEnumRuleCall_1_1_3_0 = (RuleCall)cSensorLanguageAssignment_1_1_3.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cReceiverKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Keyword cLanguageKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Keyword cColonKeyword_1_2_2 = (Keyword)cGroup_1_2.eContents().get(2);
		private final Assignment cReceiverLanguageAssignment_1_2_3 = (Assignment)cGroup_1_2.eContents().get(3);
		private final RuleCall cReceiverLanguageGenerationLanguageEnumRuleCall_1_2_3_0 = (RuleCall)cReceiverLanguageAssignment_1_2_3.eContents().get(0);
		
		//Options:
		//	{Options} ("transmission" "type" ":" transmissionType=Transmission | "sensor" "language" ":"
		//	sensorLanguage=GenerationLanguage | "receiver" "language" ":" receiverLanguage=GenerationLanguage)*;
		public ParserRule getRule() { return rule; }

		//{Options} ("transmission" "type" ":" transmissionType=Transmission | "sensor" "language" ":"
		//sensorLanguage=GenerationLanguage | "receiver" "language" ":" receiverLanguage=GenerationLanguage)*
		public Group getGroup() { return cGroup; }

		//{Options}
		public Action getOptionsAction_0() { return cOptionsAction_0; }

		//("transmission" "type" ":" transmissionType=Transmission | "sensor" "language" ":" sensorLanguage=GenerationLanguage |
		//"receiver" "language" ":" receiverLanguage=GenerationLanguage)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"transmission" "type" ":" transmissionType=Transmission
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"transmission"
		public Keyword getTransmissionKeyword_1_0_0() { return cTransmissionKeyword_1_0_0; }

		//"type"
		public Keyword getTypeKeyword_1_0_1() { return cTypeKeyword_1_0_1; }

		//":"
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }

		//transmissionType=Transmission
		public Assignment getTransmissionTypeAssignment_1_0_3() { return cTransmissionTypeAssignment_1_0_3; }

		//Transmission
		public RuleCall getTransmissionTypeTransmissionParserRuleCall_1_0_3_0() { return cTransmissionTypeTransmissionParserRuleCall_1_0_3_0; }

		//"sensor" "language" ":" sensorLanguage=GenerationLanguage
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"sensor"
		public Keyword getSensorKeyword_1_1_0() { return cSensorKeyword_1_1_0; }

		//"language"
		public Keyword getLanguageKeyword_1_1_1() { return cLanguageKeyword_1_1_1; }

		//":"
		public Keyword getColonKeyword_1_1_2() { return cColonKeyword_1_1_2; }

		//sensorLanguage=GenerationLanguage
		public Assignment getSensorLanguageAssignment_1_1_3() { return cSensorLanguageAssignment_1_1_3; }

		//GenerationLanguage
		public RuleCall getSensorLanguageGenerationLanguageEnumRuleCall_1_1_3_0() { return cSensorLanguageGenerationLanguageEnumRuleCall_1_1_3_0; }

		//"receiver" "language" ":" receiverLanguage=GenerationLanguage
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"receiver"
		public Keyword getReceiverKeyword_1_2_0() { return cReceiverKeyword_1_2_0; }

		//"language"
		public Keyword getLanguageKeyword_1_2_1() { return cLanguageKeyword_1_2_1; }

		//":"
		public Keyword getColonKeyword_1_2_2() { return cColonKeyword_1_2_2; }

		//receiverLanguage=GenerationLanguage
		public Assignment getReceiverLanguageAssignment_1_2_3() { return cReceiverLanguageAssignment_1_2_3; }

		//GenerationLanguage
		public RuleCall getReceiverLanguageGenerationLanguageEnumRuleCall_1_2_3_0() { return cReceiverLanguageGenerationLanguageEnumRuleCall_1_2_3_0; }
	}

	public class TransmissionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transmission");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPullParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPushParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Transmission:
		//	Pull | Push;
		public ParserRule getRule() { return rule; }

		//Pull | Push
		public Alternatives getAlternatives() { return cAlternatives; }

		//Pull
		public RuleCall getPullParserRuleCall_0() { return cPullParserRuleCall_0; }

		//Push
		public RuleCall getPushParserRuleCall_1() { return cPushParserRuleCall_1; }
	}

	public class PushElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Push");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPushKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMethodNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMethodNameIDTerminalRuleCall_2_0 = (RuleCall)cMethodNameAssignment_2.eContents().get(0);
		
		//Push:
		//	"push" "with" methodName=ID;
		public ParserRule getRule() { return rule; }

		//"push" "with" methodName=ID
		public Group getGroup() { return cGroup; }

		//"push"
		public Keyword getPushKeyword_0() { return cPushKeyword_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//methodName=ID
		public Assignment getMethodNameAssignment_2() { return cMethodNameAssignment_2; }

		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_2_0() { return cMethodNameIDTerminalRuleCall_2_0; }
	}

	public class PullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pull");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTimeDivisionMultiplexingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPullKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cWithKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cFrequencyKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cFrequencyAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_1_4_0 = (RuleCall)cFrequencyAssignment_1_4.eContents().get(0);
		
		//Pull:
		//	TimeDivisionMultiplexing | "pull" "with" "Frequency" ":" frequency=INT;
		public ParserRule getRule() { return rule; }

		//TimeDivisionMultiplexing | "pull" "with" "Frequency" ":" frequency=INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//TimeDivisionMultiplexing
		public RuleCall getTimeDivisionMultiplexingParserRuleCall_0() { return cTimeDivisionMultiplexingParserRuleCall_0; }

		//"pull" "with" "Frequency" ":" frequency=INT
		public Group getGroup_1() { return cGroup_1; }

		//"pull"
		public Keyword getPullKeyword_1_0() { return cPullKeyword_1_0; }

		//"with"
		public Keyword getWithKeyword_1_1() { return cWithKeyword_1_1; }

		//"Frequency"
		public Keyword getFrequencyKeyword_1_2() { return cFrequencyKeyword_1_2; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//frequency=INT
		public Assignment getFrequencyAssignment_1_4() { return cFrequencyAssignment_1_4; }

		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_1_4_0() { return cFrequencyINTTerminalRuleCall_1_4_0; }
	}

	public class TimeDivisionMultiplexingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeDivisionMultiplexing");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeDivisionMultiplexingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWithKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFrequencyKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		private final Keyword cAndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cDurationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cColonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cDurationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDurationDOUBLEParserRuleCall_8_0 = (RuleCall)cDurationAssignment_8.eContents().get(0);
		private final Keyword cAndKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cTimeSlotKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cColonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cTimeSlotAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cTimeSlotDOUBLEParserRuleCall_12_0 = (RuleCall)cTimeSlotAssignment_12.eContents().get(0);
		
		//TimeDivisionMultiplexing:
		//	"timeDivisionMultiplexing" "with" "Frequency" ":" frequency=INT "and" "Duration" ":" duration=DOUBLE "and" "timeSlot"
		//	":" timeSlot=DOUBLE;
		public ParserRule getRule() { return rule; }

		//"timeDivisionMultiplexing" "with" "Frequency" ":" frequency=INT "and" "Duration" ":" duration=DOUBLE "and" "timeSlot"
		//":" timeSlot=DOUBLE
		public Group getGroup() { return cGroup; }

		//"timeDivisionMultiplexing"
		public Keyword getTimeDivisionMultiplexingKeyword_0() { return cTimeDivisionMultiplexingKeyword_0; }

		//"with"
		public Keyword getWithKeyword_1() { return cWithKeyword_1; }

		//"Frequency"
		public Keyword getFrequencyKeyword_2() { return cFrequencyKeyword_2; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }

		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }

		//"and"
		public Keyword getAndKeyword_5() { return cAndKeyword_5; }

		//"Duration"
		public Keyword getDurationKeyword_6() { return cDurationKeyword_6; }

		//":"
		public Keyword getColonKeyword_7() { return cColonKeyword_7; }

		//duration=DOUBLE
		public Assignment getDurationAssignment_8() { return cDurationAssignment_8; }

		//DOUBLE
		public RuleCall getDurationDOUBLEParserRuleCall_8_0() { return cDurationDOUBLEParserRuleCall_8_0; }

		//"and"
		public Keyword getAndKeyword_9() { return cAndKeyword_9; }

		//"timeSlot"
		public Keyword getTimeSlotKeyword_10() { return cTimeSlotKeyword_10; }

		//":"
		public Keyword getColonKeyword_11() { return cColonKeyword_11; }

		//timeSlot=DOUBLE
		public Assignment getTimeSlotAssignment_12() { return cTimeSlotAssignment_12; }

		//DOUBLE
		public RuleCall getTimeSlotDOUBLEParserRuleCall_12_0() { return cTimeSlotDOUBLEParserRuleCall_12_0; }
	}

	public class RepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Representation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cReprKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRepresentationKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cByteCountAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cByteCountINTTerminalRuleCall_5_0 = (RuleCall)cByteCountAssignment_5.eContents().get(0);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Keyword cBytesKeyword_6_0 = (Keyword)cAlternatives_6.eContents().get(0);
		private final Keyword cByteKeyword_6_1 = (Keyword)cAlternatives_6.eContents().get(1);
		
		//Representation:
		//	("repr" | "representation") name=ID "is" type=Type "by" byteCount=INT ("bytes" | "byte");
		public ParserRule getRule() { return rule; }

		//("repr" | "representation") name=ID "is" type=Type "by" byteCount=INT ("bytes" | "byte")
		public Group getGroup() { return cGroup; }

		//"repr" | "representation"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"repr"
		public Keyword getReprKeyword_0_0() { return cReprKeyword_0_0; }

		//"representation"
		public Keyword getRepresentationKeyword_0_1() { return cRepresentationKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }

		//"by"
		public Keyword getByKeyword_4() { return cByKeyword_4; }

		//byteCount=INT
		public Assignment getByteCountAssignment_5() { return cByteCountAssignment_5; }

		//INT
		public RuleCall getByteCountINTTerminalRuleCall_5_0() { return cByteCountINTTerminalRuleCall_5_0; }

		//"bytes" | "byte"
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//"bytes"
		public Keyword getBytesKeyword_6_0() { return cBytesKeyword_6_0; }

		//"byte"
		public Keyword getByteKeyword_6_1() { return cByteKeyword_6_1; }
	}

	public class InterpretationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interpretation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPrimitiveInterpretationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeasurementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInterpretationGroupParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cCalculatedParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Interpretation:
		//	Constant | PrimitiveInterpretation | Measurement | InterpretationGroup | Calculated;
		public ParserRule getRule() { return rule; }

		//Constant | PrimitiveInterpretation | Measurement | InterpretationGroup | Calculated
		public Alternatives getAlternatives() { return cAlternatives; }

		//Constant
		public RuleCall getConstantParserRuleCall_0() { return cConstantParserRuleCall_0; }

		//PrimitiveInterpretation
		public RuleCall getPrimitiveInterpretationParserRuleCall_1() { return cPrimitiveInterpretationParserRuleCall_1; }

		//Measurement
		public RuleCall getMeasurementParserRuleCall_2() { return cMeasurementParserRuleCall_2; }

		//InterpretationGroup
		public RuleCall getInterpretationGroupParserRuleCall_3() { return cInterpretationGroupParserRuleCall_3; }

		//Calculated
		public RuleCall getCalculatedParserRuleCall_4() { return cCalculatedParserRuleCall_4; }
	}

	public class CalculatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Calculated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCalculateKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCalculatedKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRepresentationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRepresentationRepresentationCrossReference_3_0 = (CrossReference)cRepresentationAssignment_3.eContents().get(0);
		private final RuleCall cRepresentationRepresentationIDTerminalRuleCall_3_0_1 = (RuleCall)cRepresentationRepresentationCrossReference_3_0.eContents().get(1);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodNameIDTerminalRuleCall_5_0 = (RuleCall)cMethodNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMethodNameOutAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMethodNameOutIDTerminalRuleCall_6_1_0 = (RuleCall)cMethodNameOutAssignment_6_1.eContents().get(0);
		private final Keyword cWithKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cParameterAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParameterParameterParserRuleCall_8_0 = (RuleCall)cParameterAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cParameterAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_9_1_0 = (RuleCall)cParameterAssignment_9_1.eContents().get(0);
		
		//Calculated:
		//	("calculate" | "calculated") name=ID "as" representation=[Representation] "by" methodName=ID ("," methodNameOut=ID)?
		//	"with" parameter+=Parameter ("," parameter+=Parameter)*;
		public ParserRule getRule() { return rule; }

		//("calculate" | "calculated") name=ID "as" representation=[Representation] "by" methodName=ID ("," methodNameOut=ID)?
		//"with" parameter+=Parameter ("," parameter+=Parameter)*
		public Group getGroup() { return cGroup; }

		//"calculate" | "calculated"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"calculate"
		public Keyword getCalculateKeyword_0_0() { return cCalculateKeyword_0_0; }

		//"calculated"
		public Keyword getCalculatedKeyword_0_1() { return cCalculatedKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//representation=[Representation]
		public Assignment getRepresentationAssignment_3() { return cRepresentationAssignment_3; }

		//[Representation]
		public CrossReference getRepresentationRepresentationCrossReference_3_0() { return cRepresentationRepresentationCrossReference_3_0; }

		//ID
		public RuleCall getRepresentationRepresentationIDTerminalRuleCall_3_0_1() { return cRepresentationRepresentationIDTerminalRuleCall_3_0_1; }

		//"by"
		public Keyword getByKeyword_4() { return cByKeyword_4; }

		//methodName=ID
		public Assignment getMethodNameAssignment_5() { return cMethodNameAssignment_5; }

		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_5_0() { return cMethodNameIDTerminalRuleCall_5_0; }

		//("," methodNameOut=ID)?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//methodNameOut=ID
		public Assignment getMethodNameOutAssignment_6_1() { return cMethodNameOutAssignment_6_1; }

		//ID
		public RuleCall getMethodNameOutIDTerminalRuleCall_6_1_0() { return cMethodNameOutIDTerminalRuleCall_6_1_0; }

		//"with"
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_8() { return cParameterAssignment_8; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_8_0() { return cParameterParameterParserRuleCall_8_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_9_1() { return cParameterAssignment_9_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_9_1_0() { return cParameterParameterParserRuleCall_9_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInterpretationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cInterpretationInterpretationCrossReference_1_0 = (CrossReference)cInterpretationAssignment_1.eContents().get(0);
		private final RuleCall cInterpretationInterpretationIDTerminalRuleCall_1_0_1 = (RuleCall)cInterpretationInterpretationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentTypeArgumentTypeEnumRuleCall_2_1_0 = (RuleCall)cArgumentTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//	"(" interpretation=[Interpretation] ("as" argumentType=ArgumentType)? ")";
		public ParserRule getRule() { return rule; }

		//"(" interpretation=[Interpretation] ("as" argumentType=ArgumentType)? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//interpretation=[Interpretation]
		public Assignment getInterpretationAssignment_1() { return cInterpretationAssignment_1; }

		//[Interpretation]
		public CrossReference getInterpretationInterpretationCrossReference_1_0() { return cInterpretationInterpretationCrossReference_1_0; }

		//ID
		public RuleCall getInterpretationInterpretationIDTerminalRuleCall_1_0_1() { return cInterpretationInterpretationIDTerminalRuleCall_1_0_1; }

		//("as" argumentType=ArgumentType)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//argumentType=ArgumentType
		public Assignment getArgumentTypeAssignment_2_1() { return cArgumentTypeAssignment_2_1; }

		//ArgumentType
		public RuleCall getArgumentTypeArgumentTypeEnumRuleCall_2_1_0() { return cArgumentTypeArgumentTypeEnumRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class InterpretationGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterpretationGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGroupKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInterpretationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInterpretationsInterpretationParserRuleCall_3_0 = (RuleCall)cInterpretationsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//InterpretationGroup:
		//	"group" name=ID "{" interpretations+=Interpretation* "}";
		public ParserRule getRule() { return rule; }

		//"group" name=ID "{" interpretations+=Interpretation* "}"
		public Group getGroup() { return cGroup; }

		//"group"
		public Keyword getGroupKeyword_0() { return cGroupKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//interpretations+=Interpretation*
		public Assignment getInterpretationsAssignment_3() { return cInterpretationsAssignment_3; }

		//Interpretation
		public RuleCall getInterpretationsInterpretationParserRuleCall_3_0() { return cInterpretationsInterpretationParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MeasurementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Measurement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeasurementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQuantityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cQuantityQuantityEnumRuleCall_2_0 = (RuleCall)cQuantityAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cScaleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cScaleDOUBLEParserRuleCall_5_0 = (RuleCall)cScaleAssignment_5.eContents().get(0);
		private final Assignment cUnitAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUnitSTRINGTerminalRuleCall_6_0 = (RuleCall)cUnitAssignment_6.eContents().get(0);
		private final Keyword cAsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cRepresentationAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cRepresentationRepresentationCrossReference_8_0 = (CrossReference)cRepresentationAssignment_8.eContents().get(0);
		private final RuleCall cRepresentationRepresentationIDTerminalRuleCall_8_0_1 = (RuleCall)cRepresentationRepresentationCrossReference_8_0.eContents().get(1);
		private final Assignment cConstraintsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cConstraintsMeasurementConstraintParserRuleCall_9_0 = (RuleCall)cConstraintsAssignment_9.eContents().get(0);
		
		/// *
		// * Einheiten noch als String
		// * / Measurement:
		//	"measurement" "of" quantity=Quantity name=ID "in" scale=DOUBLE? unit=STRING "as" representation=[Representation]
		//	constraints+=MeasurementConstraint*;
		public ParserRule getRule() { return rule; }

		//"measurement" "of" quantity=Quantity name=ID "in" scale=DOUBLE? unit=STRING "as" representation=[Representation]
		//constraints+=MeasurementConstraint*
		public Group getGroup() { return cGroup; }

		//"measurement"
		public Keyword getMeasurementKeyword_0() { return cMeasurementKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//quantity=Quantity
		public Assignment getQuantityAssignment_2() { return cQuantityAssignment_2; }

		//Quantity
		public RuleCall getQuantityQuantityEnumRuleCall_2_0() { return cQuantityQuantityEnumRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"in"
		public Keyword getInKeyword_4() { return cInKeyword_4; }

		//scale=DOUBLE?
		public Assignment getScaleAssignment_5() { return cScaleAssignment_5; }

		//DOUBLE
		public RuleCall getScaleDOUBLEParserRuleCall_5_0() { return cScaleDOUBLEParserRuleCall_5_0; }

		//unit=STRING
		public Assignment getUnitAssignment_6() { return cUnitAssignment_6; }

		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_6_0() { return cUnitSTRINGTerminalRuleCall_6_0; }

		//"as"
		public Keyword getAsKeyword_7() { return cAsKeyword_7; }

		//representation=[Representation]
		public Assignment getRepresentationAssignment_8() { return cRepresentationAssignment_8; }

		//[Representation]
		public CrossReference getRepresentationRepresentationCrossReference_8_0() { return cRepresentationRepresentationCrossReference_8_0; }

		//ID
		public RuleCall getRepresentationRepresentationIDTerminalRuleCall_8_0_1() { return cRepresentationRepresentationIDTerminalRuleCall_8_0_1; }

		//constraints+=MeasurementConstraint*
		public Assignment getConstraintsAssignment_9() { return cConstraintsAssignment_9; }

		//MeasurementConstraint
		public RuleCall getConstraintsMeasurementConstraintParserRuleCall_9_0() { return cConstraintsMeasurementConstraintParserRuleCall_9_0; }
	}

	public class MeasurementConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMeasurementInRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMeasurementAdaptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MeasurementConstraint:
		//	MeasurementInRange | MeasurementAdaption;
		public ParserRule getRule() { return rule; }

		//MeasurementInRange | MeasurementAdaption
		public Alternatives getAlternatives() { return cAlternatives; }

		//MeasurementInRange
		public RuleCall getMeasurementInRangeParserRuleCall_0() { return cMeasurementInRangeParserRuleCall_0; }

		//MeasurementAdaption
		public RuleCall getMeasurementAdaptionParserRuleCall_1() { return cMeasurementAdaptionParserRuleCall_1; }
	}

	public class MeasurementInRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementInRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundMeasureParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundMeasureParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		
		//MeasurementInRange:
		//	"from" lowerBound=Measure "to" upperBound=Measure;
		public ParserRule getRule() { return rule; }

		//"from" lowerBound=Measure "to" upperBound=Measure
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//lowerBound=Measure
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//Measure
		public RuleCall getLowerBoundMeasureParserRuleCall_1_0() { return cLowerBoundMeasureParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//upperBound=Measure
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//Measure
		public RuleCall getUpperBoundMeasureParserRuleCall_3_0() { return cUpperBoundMeasureParserRuleCall_3_0; }
	}

	public class MeasurementAdaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementAdaption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cScalingFactorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScalingFactorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScalingFactorDOUBLEParserRuleCall_3_0 = (RuleCall)cScalingFactorAssignment_3.eContents().get(0);
		private final Keyword cAndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cOffsetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOffsetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOffsetDOUBLEParserRuleCall_7_0 = (RuleCall)cOffsetAssignment_7.eContents().get(0);
		
		//MeasurementAdaption:
		//	"with" "scaling factor" ":" scalingFactor=DOUBLE "and" "offset" ":" offset=DOUBLE;
		public ParserRule getRule() { return rule; }

		//"with" "scaling factor" ":" scalingFactor=DOUBLE "and" "offset" ":" offset=DOUBLE
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//"scaling factor"
		public Keyword getScalingFactorKeyword_1() { return cScalingFactorKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//scalingFactor=DOUBLE
		public Assignment getScalingFactorAssignment_3() { return cScalingFactorAssignment_3; }

		//DOUBLE
		public RuleCall getScalingFactorDOUBLEParserRuleCall_3_0() { return cScalingFactorDOUBLEParserRuleCall_3_0; }

		//"and"
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }

		//"offset"
		public Keyword getOffsetKeyword_5() { return cOffsetKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//offset=DOUBLE
		public Assignment getOffsetAssignment_7() { return cOffsetAssignment_7; }

		//DOUBLE
		public RuleCall getOffsetDOUBLEParserRuleCall_7_0() { return cOffsetDOUBLEParserRuleCall_7_0; }
	}

	public class MeasureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Measure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueDOUBLEParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitSTRINGTerminalRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		/// *
		// * Einheiten noch als String
		// * / Measure:
		//	value=DOUBLE unit=STRING;
		public ParserRule getRule() { return rule; }

		//value=DOUBLE unit=STRING
		public Group getGroup() { return cGroup; }

		//value=DOUBLE
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_0_0() { return cValueDOUBLEParserRuleCall_0_0; }

		//unit=STRING
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_1_0() { return cUnitSTRINGTerminalRuleCall_1_0; }
	}

	public class PrimitiveInterpretationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveInterpretation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRepresentationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRepresentationRepresentationCrossReference_4_0 = (CrossReference)cRepresentationAssignment_4.eContents().get(0);
		private final RuleCall cRepresentationRepresentationIDTerminalRuleCall_4_0_1 = (RuleCall)cRepresentationRepresentationCrossReference_4_0.eContents().get(1);
		
		//PrimitiveInterpretation:
		//	"primitive" type=Type name=ID "as" representation=[Representation];
		public ParserRule getRule() { return rule; }

		//"primitive" type=Type name=ID "as" representation=[Representation]
		public Group getGroup() { return cGroup; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//representation=[Representation]
		public Assignment getRepresentationAssignment_4() { return cRepresentationAssignment_4; }

		//[Representation]
		public CrossReference getRepresentationRepresentationCrossReference_4_0() { return cRepresentationRepresentationCrossReference_4_0; }

		//ID
		public RuleCall getRepresentationRepresentationIDTerminalRuleCall_4_0_1() { return cRepresentationRepresentationIDTerminalRuleCall_4_0_1; }
	}

	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Constant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRepresentationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRepresentationRepresentationCrossReference_3_0 = (CrossReference)cRepresentationAssignment_3.eContents().get(0);
		private final RuleCall cRepresentationRepresentationIDTerminalRuleCall_3_0_1 = (RuleCall)cRepresentationRepresentationCrossReference_3_0.eContents().get(1);
		private final Keyword cIsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cConstantValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConstantValueSTRINGTerminalRuleCall_5_0 = (RuleCall)cConstantValueAssignment_5.eContents().get(0);
		
		//Constant:
		//	"constant" name=ID "as" representation=[Representation] "is" constantValue=STRING;
		public ParserRule getRule() { return rule; }

		//"constant" name=ID "as" representation=[Representation] "is" constantValue=STRING
		public Group getGroup() { return cGroup; }

		//"constant"
		public Keyword getConstantKeyword_0() { return cConstantKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//representation=[Representation]
		public Assignment getRepresentationAssignment_3() { return cRepresentationAssignment_3; }

		//[Representation]
		public CrossReference getRepresentationRepresentationCrossReference_3_0() { return cRepresentationRepresentationCrossReference_3_0; }

		//ID
		public RuleCall getRepresentationRepresentationIDTerminalRuleCall_3_0_1() { return cRepresentationRepresentationIDTerminalRuleCall_3_0_1; }

		//"is"
		public Keyword getIsKeyword_4() { return cIsKeyword_4; }

		//constantValue=STRING
		public Assignment getConstantValueAssignment_5() { return cConstantValueAssignment_5; }

		//STRING
		public RuleCall getConstantValueSTRINGTerminalRuleCall_5_0() { return cConstantValueSTRINGTerminalRuleCall_5_0; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DOUBLE returns ecore::EDouble:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	public class GenerationLanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GenerationLanguage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJAVAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJAVAJAVAKeyword_0_0 = (Keyword)cJAVAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCPPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCPPCPPKeyword_1_0 = (Keyword)cCPPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCCKeyword_2_0 = (Keyword)cCEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum GenerationLanguage:
		//	JAVA | CPP | C;
		public EnumRule getRule() { return rule; }

		//JAVA | CPP | C
		public Alternatives getAlternatives() { return cAlternatives; }

		//JAVA
		public EnumLiteralDeclaration getJAVAEnumLiteralDeclaration_0() { return cJAVAEnumLiteralDeclaration_0; }

		//"JAVA"
		public Keyword getJAVAJAVAKeyword_0_0() { return cJAVAJAVAKeyword_0_0; }

		//CPP
		public EnumLiteralDeclaration getCPPEnumLiteralDeclaration_1() { return cCPPEnumLiteralDeclaration_1; }

		//"CPP"
		public Keyword getCPPCPPKeyword_1_0() { return cCPPCPPKeyword_1_0; }

		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_2() { return cCEnumLiteralDeclaration_2; }

		//"C"
		public Keyword getCCKeyword_2_0() { return cCCKeyword_2_0; }
	}

	public class ArgumentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentType");
		private final EnumLiteralDeclaration cBYTE_ARRAYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBYTE_ARRAYBYTE_ARRAYKeyword_0 = (Keyword)cBYTE_ARRAYEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * Die EEnums und EEnumLiterals können direkt so ausgedrückt werden.
		// * / enum ArgumentType:
		//	BYTE_ARRAY;
		public EnumRule getRule() { return rule; }

		//BYTE_ARRAY
		public EnumLiteralDeclaration getBYTE_ARRAYEnumLiteralDeclaration() { return cBYTE_ARRAYEnumLiteralDeclaration; }

		//"BYTE_ARRAY"
		public Keyword getBYTE_ARRAYBYTE_ARRAYKeyword_0() { return cBYTE_ARRAYBYTE_ARRAYKeyword_0; }
	}

	public class QuantityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Quantity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFLOWEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFLOWFLOWKeyword_0_0 = (Keyword)cFLOWEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTEMPERATUREEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTEMPERATURETEMPERATUREKeyword_1_0 = (Keyword)cTEMPERATUREEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cVOLUMEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cVOLUMEVOLUMEKeyword_2_0 = (Keyword)cVOLUMEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDURATIONEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDURATIONDURATIONKeyword_3_0 = (Keyword)cDURATIONEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPRESSUREEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPRESSUREPRESSUREKeyword_4_0 = (Keyword)cPRESSUREEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum Quantity:
		//	FLOW | TEMPERATURE | VOLUME | DURATION | PRESSURE;
		public EnumRule getRule() { return rule; }

		//FLOW | TEMPERATURE | VOLUME | DURATION | PRESSURE
		public Alternatives getAlternatives() { return cAlternatives; }

		//FLOW
		public EnumLiteralDeclaration getFLOWEnumLiteralDeclaration_0() { return cFLOWEnumLiteralDeclaration_0; }

		//"FLOW"
		public Keyword getFLOWFLOWKeyword_0_0() { return cFLOWFLOWKeyword_0_0; }

		//TEMPERATURE
		public EnumLiteralDeclaration getTEMPERATUREEnumLiteralDeclaration_1() { return cTEMPERATUREEnumLiteralDeclaration_1; }

		//"TEMPERATURE"
		public Keyword getTEMPERATURETEMPERATUREKeyword_1_0() { return cTEMPERATURETEMPERATUREKeyword_1_0; }

		//VOLUME
		public EnumLiteralDeclaration getVOLUMEEnumLiteralDeclaration_2() { return cVOLUMEEnumLiteralDeclaration_2; }

		//"VOLUME"
		public Keyword getVOLUMEVOLUMEKeyword_2_0() { return cVOLUMEVOLUMEKeyword_2_0; }

		//DURATION
		public EnumLiteralDeclaration getDURATIONEnumLiteralDeclaration_3() { return cDURATIONEnumLiteralDeclaration_3; }

		//"DURATION"
		public Keyword getDURATIONDURATIONKeyword_3_0() { return cDURATIONDURATIONKeyword_3_0; }

		//PRESSURE
		public EnumLiteralDeclaration getPRESSUREEnumLiteralDeclaration_4() { return cPRESSUREEnumLiteralDeclaration_4; }

		//"PRESSURE"
		public Keyword getPRESSUREPRESSUREKeyword_4_0() { return cPRESSUREPRESSUREKeyword_4_0; }
	}

	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBYTEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBYTEBYTEKeyword_0_0 = (Keyword)cBYTEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSHORTSHORTKeyword_1_0 = (Keyword)cSHORTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTINTKeyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLONGLONGKeyword_3_0 = (Keyword)cLONGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFLOATKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDOUBLEDOUBLEKeyword_5_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Type:
		//	BYTE | SHORT | INT | LONG | FLOAT | DOUBLE;
		public EnumRule getRule() { return rule; }

		//BYTE | SHORT | INT | LONG | FLOAT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }

		//BYTE
		public EnumLiteralDeclaration getBYTEEnumLiteralDeclaration_0() { return cBYTEEnumLiteralDeclaration_0; }

		//"BYTE"
		public Keyword getBYTEBYTEKeyword_0_0() { return cBYTEBYTEKeyword_0_0; }

		//SHORT
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_1() { return cSHORTEnumLiteralDeclaration_1; }

		//"SHORT"
		public Keyword getSHORTSHORTKeyword_1_0() { return cSHORTSHORTKeyword_1_0; }

		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }

		//"INT"
		public Keyword getINTINTKeyword_2_0() { return cINTINTKeyword_2_0; }

		//LONG
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_3() { return cLONGEnumLiteralDeclaration_3; }

		//"LONG"
		public Keyword getLONGLONGKeyword_3_0() { return cLONGLONGKeyword_3_0; }

		//FLOAT
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }

		//"FLOAT"
		public Keyword getFLOATFLOATKeyword_4_0() { return cFLOATFLOATKeyword_4_0; }

		//DOUBLE
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_5() { return cDOUBLEEnumLiteralDeclaration_5; }

		//"DOUBLE"
		public Keyword getDOUBLEDOUBLEKeyword_5_0() { return cDOUBLEDOUBLEKeyword_5_0; }
	}
	
	private final DataModelElements pDataModel;
	private final OptionsElements pOptions;
	private final TransmissionElements pTransmission;
	private final PushElements pPush;
	private final PullElements pPull;
	private final TimeDivisionMultiplexingElements pTimeDivisionMultiplexing;
	private final GenerationLanguageElements unknownRuleGenerationLanguage;
	private final RepresentationElements pRepresentation;
	private final InterpretationElements pInterpretation;
	private final CalculatedElements pCalculated;
	private final ParameterElements pParameter;
	private final InterpretationGroupElements pInterpretationGroup;
	private final MeasurementElements pMeasurement;
	private final MeasurementConstraintElements pMeasurementConstraint;
	private final MeasurementInRangeElements pMeasurementInRange;
	private final MeasurementAdaptionElements pMeasurementAdaption;
	private final MeasureElements pMeasure;
	private final PrimitiveInterpretationElements pPrimitiveInterpretation;
	private final ConstantElements pConstant;
	private final DOUBLEElements pDOUBLE;
	private final ArgumentTypeElements unknownRuleArgumentType;
	private final QuantityElements unknownRuleQuantity;
	private final TypeElements unknownRuleType;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SensidlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.pOptions = new OptionsElements();
		this.pTransmission = new TransmissionElements();
		this.pPush = new PushElements();
		this.pPull = new PullElements();
		this.pTimeDivisionMultiplexing = new TimeDivisionMultiplexingElements();
		this.unknownRuleGenerationLanguage = new GenerationLanguageElements();
		this.pRepresentation = new RepresentationElements();
		this.pInterpretation = new InterpretationElements();
		this.pCalculated = new CalculatedElements();
		this.pParameter = new ParameterElements();
		this.pInterpretationGroup = new InterpretationGroupElements();
		this.pMeasurement = new MeasurementElements();
		this.pMeasurementConstraint = new MeasurementConstraintElements();
		this.pMeasurementInRange = new MeasurementInRangeElements();
		this.pMeasurementAdaption = new MeasurementAdaptionElements();
		this.pMeasure = new MeasureElements();
		this.pPrimitiveInterpretation = new PrimitiveInterpretationElements();
		this.pConstant = new ConstantElements();
		this.pDOUBLE = new DOUBLEElements();
		this.unknownRuleArgumentType = new ArgumentTypeElements();
		this.unknownRuleQuantity = new QuantityElements();
		this.unknownRuleType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fzi.sensidl.language.Sensidl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataModel:
	//	"options" "{" options=Options "}" (representations+=Representation | interpretations+=Interpretation)* "transmit"
	//	transmit+=[Interpretation] ("," transmit+=[Interpretation])*;
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}

	//Options:
	//	{Options} ("transmission" "type" ":" transmissionType=Transmission | "sensor" "language" ":"
	//	sensorLanguage=GenerationLanguage | "receiver" "language" ":" receiverLanguage=GenerationLanguage)*;
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}

	//Transmission:
	//	Pull | Push;
	public TransmissionElements getTransmissionAccess() {
		return pTransmission;
	}
	
	public ParserRule getTransmissionRule() {
		return getTransmissionAccess().getRule();
	}

	//Push:
	//	"push" "with" methodName=ID;
	public PushElements getPushAccess() {
		return pPush;
	}
	
	public ParserRule getPushRule() {
		return getPushAccess().getRule();
	}

	//Pull:
	//	TimeDivisionMultiplexing | "pull" "with" "Frequency" ":" frequency=INT;
	public PullElements getPullAccess() {
		return pPull;
	}
	
	public ParserRule getPullRule() {
		return getPullAccess().getRule();
	}

	//TimeDivisionMultiplexing:
	//	"timeDivisionMultiplexing" "with" "Frequency" ":" frequency=INT "and" "Duration" ":" duration=DOUBLE "and" "timeSlot"
	//	":" timeSlot=DOUBLE;
	public TimeDivisionMultiplexingElements getTimeDivisionMultiplexingAccess() {
		return pTimeDivisionMultiplexing;
	}
	
	public ParserRule getTimeDivisionMultiplexingRule() {
		return getTimeDivisionMultiplexingAccess().getRule();
	}

	//enum GenerationLanguage:
	//	JAVA | CPP | C;
	public GenerationLanguageElements getGenerationLanguageAccess() {
		return unknownRuleGenerationLanguage;
	}
	
	public EnumRule getGenerationLanguageRule() {
		return getGenerationLanguageAccess().getRule();
	}

	//Representation:
	//	("repr" | "representation") name=ID "is" type=Type "by" byteCount=INT ("bytes" | "byte");
	public RepresentationElements getRepresentationAccess() {
		return pRepresentation;
	}
	
	public ParserRule getRepresentationRule() {
		return getRepresentationAccess().getRule();
	}

	//Interpretation:
	//	Constant | PrimitiveInterpretation | Measurement | InterpretationGroup | Calculated;
	public InterpretationElements getInterpretationAccess() {
		return pInterpretation;
	}
	
	public ParserRule getInterpretationRule() {
		return getInterpretationAccess().getRule();
	}

	//Calculated:
	//	("calculate" | "calculated") name=ID "as" representation=[Representation] "by" methodName=ID ("," methodNameOut=ID)?
	//	"with" parameter+=Parameter ("," parameter+=Parameter)*;
	public CalculatedElements getCalculatedAccess() {
		return pCalculated;
	}
	
	public ParserRule getCalculatedRule() {
		return getCalculatedAccess().getRule();
	}

	//Parameter:
	//	"(" interpretation=[Interpretation] ("as" argumentType=ArgumentType)? ")";
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//InterpretationGroup:
	//	"group" name=ID "{" interpretations+=Interpretation* "}";
	public InterpretationGroupElements getInterpretationGroupAccess() {
		return pInterpretationGroup;
	}
	
	public ParserRule getInterpretationGroupRule() {
		return getInterpretationGroupAccess().getRule();
	}

	/// *
	// * Einheiten noch als String
	// * / Measurement:
	//	"measurement" "of" quantity=Quantity name=ID "in" scale=DOUBLE? unit=STRING "as" representation=[Representation]
	//	constraints+=MeasurementConstraint*;
	public MeasurementElements getMeasurementAccess() {
		return pMeasurement;
	}
	
	public ParserRule getMeasurementRule() {
		return getMeasurementAccess().getRule();
	}

	//MeasurementConstraint:
	//	MeasurementInRange | MeasurementAdaption;
	public MeasurementConstraintElements getMeasurementConstraintAccess() {
		return pMeasurementConstraint;
	}
	
	public ParserRule getMeasurementConstraintRule() {
		return getMeasurementConstraintAccess().getRule();
	}

	//MeasurementInRange:
	//	"from" lowerBound=Measure "to" upperBound=Measure;
	public MeasurementInRangeElements getMeasurementInRangeAccess() {
		return pMeasurementInRange;
	}
	
	public ParserRule getMeasurementInRangeRule() {
		return getMeasurementInRangeAccess().getRule();
	}

	//MeasurementAdaption:
	//	"with" "scaling factor" ":" scalingFactor=DOUBLE "and" "offset" ":" offset=DOUBLE;
	public MeasurementAdaptionElements getMeasurementAdaptionAccess() {
		return pMeasurementAdaption;
	}
	
	public ParserRule getMeasurementAdaptionRule() {
		return getMeasurementAdaptionAccess().getRule();
	}

	/// *
	// * Einheiten noch als String
	// * / Measure:
	//	value=DOUBLE unit=STRING;
	public MeasureElements getMeasureAccess() {
		return pMeasure;
	}
	
	public ParserRule getMeasureRule() {
		return getMeasureAccess().getRule();
	}

	//PrimitiveInterpretation:
	//	"primitive" type=Type name=ID "as" representation=[Representation];
	public PrimitiveInterpretationElements getPrimitiveInterpretationAccess() {
		return pPrimitiveInterpretation;
	}
	
	public ParserRule getPrimitiveInterpretationRule() {
		return getPrimitiveInterpretationAccess().getRule();
	}

	//Constant:
	//	"constant" name=ID "as" representation=[Representation] "is" constantValue=STRING;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	INT ("." INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	/// *
	// * Die EEnums und EEnumLiterals können direkt so ausgedrückt werden.
	// * / enum ArgumentType:
	//	BYTE_ARRAY;
	public ArgumentTypeElements getArgumentTypeAccess() {
		return unknownRuleArgumentType;
	}
	
	public EnumRule getArgumentTypeRule() {
		return getArgumentTypeAccess().getRule();
	}

	//enum Quantity:
	//	FLOW | TEMPERATURE | VOLUME | DURATION | PRESSURE;
	public QuantityElements getQuantityAccess() {
		return unknownRuleQuantity;
	}
	
	public EnumRule getQuantityRule() {
		return getQuantityAccess().getRule();
	}

	//enum Type:
	//	BYTE | SHORT | INT | LONG | FLOAT | DOUBLE;
	public TypeElements getTypeAccess() {
		return unknownRuleType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
