/*
* generated by Xtext
*/
package de.fzi.sensidl.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SensidlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DataModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatamodelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cOptionsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cOptionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cOptionsOptionsParserRuleCall_4_0 = (RuleCall)cOptionsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Alternatives cAlternatives_6 = (Alternatives)cGroup.eContents().get(6);
		private final Assignment cRepresentationsAssignment_6_0 = (Assignment)cAlternatives_6.eContents().get(0);
		private final RuleCall cRepresentationsRepresentationParserRuleCall_6_0_0 = (RuleCall)cRepresentationsAssignment_6_0.eContents().get(0);
		private final Assignment cDatafieldsAssignment_6_1 = (Assignment)cAlternatives_6.eContents().get(1);
		private final RuleCall cDatafieldsDatafieldParserRuleCall_6_1_0 = (RuleCall)cDatafieldsAssignment_6_1.eContents().get(0);
		private final Keyword cTransmitKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTransmitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTransmitDatafieldCrossReference_8_0 = (CrossReference)cTransmitAssignment_8.eContents().get(0);
		private final RuleCall cTransmitDatafieldIDTerminalRuleCall_8_0_1 = (RuleCall)cTransmitDatafieldCrossReference_8_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cTransmitAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cTransmitDatafieldCrossReference_9_1_0 = (CrossReference)cTransmitAssignment_9_1.eContents().get(0);
		private final RuleCall cTransmitDatafieldIDTerminalRuleCall_9_1_0_1 = (RuleCall)cTransmitDatafieldCrossReference_9_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//DataModel:
		//	"datamodel" "{" "options" "{" options=Options "}" (representations+=Representation | datafields+=Datafield)*
		//	"transmit" transmit+=[Datafield] ("," transmit+=[Datafield])* "}";
		public ParserRule getRule() { return rule; }

		//"datamodel" "{" "options" "{" options=Options "}" (representations+=Representation | datafields+=Datafield)* "transmit"
		//transmit+=[Datafield] ("," transmit+=[Datafield])* "}"
		public Group getGroup() { return cGroup; }

		//"datamodel"
		public Keyword getDatamodelKeyword_0() { return cDatamodelKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"options"
		public Keyword getOptionsKeyword_2() { return cOptionsKeyword_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//options=Options
		public Assignment getOptionsAssignment_4() { return cOptionsAssignment_4; }

		//Options
		public RuleCall getOptionsOptionsParserRuleCall_4_0() { return cOptionsOptionsParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }

		//(representations+=Representation | datafields+=Datafield)*
		public Alternatives getAlternatives_6() { return cAlternatives_6; }

		//representations+=Representation
		public Assignment getRepresentationsAssignment_6_0() { return cRepresentationsAssignment_6_0; }

		//Representation
		public RuleCall getRepresentationsRepresentationParserRuleCall_6_0_0() { return cRepresentationsRepresentationParserRuleCall_6_0_0; }

		//datafields+=Datafield
		public Assignment getDatafieldsAssignment_6_1() { return cDatafieldsAssignment_6_1; }

		//Datafield
		public RuleCall getDatafieldsDatafieldParserRuleCall_6_1_0() { return cDatafieldsDatafieldParserRuleCall_6_1_0; }

		//"transmit"
		public Keyword getTransmitKeyword_7() { return cTransmitKeyword_7; }

		//transmit+=[Datafield]
		public Assignment getTransmitAssignment_8() { return cTransmitAssignment_8; }

		//[Datafield]
		public CrossReference getTransmitDatafieldCrossReference_8_0() { return cTransmitDatafieldCrossReference_8_0; }

		//ID
		public RuleCall getTransmitDatafieldIDTerminalRuleCall_8_0_1() { return cTransmitDatafieldIDTerminalRuleCall_8_0_1; }

		//("," transmit+=[Datafield])*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//transmit+=[Datafield]
		public Assignment getTransmitAssignment_9_1() { return cTransmitAssignment_9_1; }

		//[Datafield]
		public CrossReference getTransmitDatafieldCrossReference_9_1_0() { return cTransmitDatafieldCrossReference_9_1_0; }

		//ID
		public RuleCall getTransmitDatafieldIDTerminalRuleCall_9_1_0_1() { return cTransmitDatafieldIDTerminalRuleCall_9_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class OptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Options");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOptionsAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cSensorKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLanguageKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Keyword cColonKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Assignment cSensorLanguageAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cSensorLanguageGenerationLanguageEnumRuleCall_1_0_3_0 = (RuleCall)cSensorLanguageAssignment_1_0_3.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cReceiverKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLanguageKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Assignment cReceiverLanguageAssignment_1_1_3 = (Assignment)cGroup_1_1.eContents().get(3);
		private final RuleCall cReceiverLanguageGenerationLanguageEnumRuleCall_1_1_3_0 = (RuleCall)cReceiverLanguageAssignment_1_1_3.eContents().get(0);
		
		//Options:
		//	{Options} ("sensor" "language" ":" sensorLanguage=GenerationLanguage | "receiver" "language" ":"
		//	receiverLanguage=GenerationLanguage)*;
		public ParserRule getRule() { return rule; }

		//{Options} ("sensor" "language" ":" sensorLanguage=GenerationLanguage | "receiver" "language" ":"
		//receiverLanguage=GenerationLanguage)*
		public Group getGroup() { return cGroup; }

		//{Options}
		public Action getOptionsAction_0() { return cOptionsAction_0; }

		//("sensor" "language" ":" sensorLanguage=GenerationLanguage | "receiver" "language" ":"
		//receiverLanguage=GenerationLanguage)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"sensor" "language" ":" sensorLanguage=GenerationLanguage
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"sensor"
		public Keyword getSensorKeyword_1_0_0() { return cSensorKeyword_1_0_0; }

		//"language"
		public Keyword getLanguageKeyword_1_0_1() { return cLanguageKeyword_1_0_1; }

		//":"
		public Keyword getColonKeyword_1_0_2() { return cColonKeyword_1_0_2; }

		//sensorLanguage=GenerationLanguage
		public Assignment getSensorLanguageAssignment_1_0_3() { return cSensorLanguageAssignment_1_0_3; }

		//GenerationLanguage
		public RuleCall getSensorLanguageGenerationLanguageEnumRuleCall_1_0_3_0() { return cSensorLanguageGenerationLanguageEnumRuleCall_1_0_3_0; }

		//"receiver" "language" ":" receiverLanguage=GenerationLanguage
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"receiver"
		public Keyword getReceiverKeyword_1_1_0() { return cReceiverKeyword_1_1_0; }

		//"language"
		public Keyword getLanguageKeyword_1_1_1() { return cLanguageKeyword_1_1_1; }

		//":"
		public Keyword getColonKeyword_1_1_2() { return cColonKeyword_1_1_2; }

		//receiverLanguage=GenerationLanguage
		public Assignment getReceiverLanguageAssignment_1_1_3() { return cReceiverLanguageAssignment_1_1_3; }

		//GenerationLanguage
		public RuleCall getReceiverLanguageGenerationLanguageEnumRuleCall_1_1_3_0() { return cReceiverLanguageGenerationLanguageEnumRuleCall_1_1_3_0; }
	}

	public class RepresentationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Representation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cReprKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRepresentationKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cByteCountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cByteCountINTTerminalRuleCall_3_0 = (RuleCall)cByteCountAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Keyword cBytesKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cByteKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTypeEnumRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		
		//Representation:
		//	("repr" | "representation") name=ID "is" byteCount=INT ("bytes" | "byte") "in" type=Type;
		public ParserRule getRule() { return rule; }

		//("repr" | "representation") name=ID "is" byteCount=INT ("bytes" | "byte") "in" type=Type
		public Group getGroup() { return cGroup; }

		//"repr" | "representation"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"repr"
		public Keyword getReprKeyword_0_0() { return cReprKeyword_0_0; }

		//"representation"
		public Keyword getRepresentationKeyword_0_1() { return cRepresentationKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//byteCount=INT
		public Assignment getByteCountAssignment_3() { return cByteCountAssignment_3; }

		//INT
		public RuleCall getByteCountINTTerminalRuleCall_3_0() { return cByteCountINTTerminalRuleCall_3_0; }

		//"bytes" | "byte"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"bytes"
		public Keyword getBytesKeyword_4_0() { return cBytesKeyword_4_0; }

		//"byte"
		public Keyword getByteKeyword_4_1() { return cByteKeyword_4_1; }

		//"in"
		public Keyword getInKeyword_5() { return cInKeyword_5; }

		//type=Type
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_6_0() { return cTypeTypeEnumRuleCall_6_0; }
	}

	public class DatafieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datafield");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMetadataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDatastructureParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCalculatedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Datafield:
		//	Metadata | Data | Datastructure | Calculated;
		public ParserRule getRule() { return rule; }

		//Metadata | Data | Datastructure | Calculated
		public Alternatives getAlternatives() { return cAlternatives; }

		//Metadata
		public RuleCall getMetadataParserRuleCall_0() { return cMetadataParserRuleCall_0; }

		//Data
		public RuleCall getDataParserRuleCall_1() { return cDataParserRuleCall_1; }

		//Datastructure
		public RuleCall getDatastructureParserRuleCall_2() { return cDatastructureParserRuleCall_2; }

		//Calculated
		public RuleCall getCalculatedParserRuleCall_3() { return cCalculatedParserRuleCall_3; }
	}

	public class CalculatedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Calculated");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCalculateKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCalculatedKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRepresentationAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRepresentationRepresentationCrossReference_3_0 = (CrossReference)cRepresentationAssignment_3.eContents().get(0);
		private final RuleCall cRepresentationRepresentationIDTerminalRuleCall_3_0_1 = (RuleCall)cRepresentationRepresentationCrossReference_3_0.eContents().get(1);
		private final Keyword cByKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cMethodNameAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cMethodNameIDTerminalRuleCall_5_0 = (RuleCall)cMethodNameAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMethodNameOutAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMethodNameOutIDTerminalRuleCall_6_1_0 = (RuleCall)cMethodNameOutAssignment_6_1.eContents().get(0);
		private final Keyword cWithKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cParameterAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cParameterParameterParserRuleCall_8_0 = (RuleCall)cParameterAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cParameterAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_9_1_0 = (RuleCall)cParameterAssignment_9_1.eContents().get(0);
		
		//Calculated:
		//	("calculate" | "calculated") name=ID "as" representation=[Representation] "by" methodName=ID ("," methodNameOut=ID)?
		//	"with" parameter+=Parameter ("," parameter+=Parameter)*;
		public ParserRule getRule() { return rule; }

		//("calculate" | "calculated") name=ID "as" representation=[Representation] "by" methodName=ID ("," methodNameOut=ID)?
		//"with" parameter+=Parameter ("," parameter+=Parameter)*
		public Group getGroup() { return cGroup; }

		//"calculate" | "calculated"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"calculate"
		public Keyword getCalculateKeyword_0_0() { return cCalculateKeyword_0_0; }

		//"calculated"
		public Keyword getCalculatedKeyword_0_1() { return cCalculatedKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//representation=[Representation]
		public Assignment getRepresentationAssignment_3() { return cRepresentationAssignment_3; }

		//[Representation]
		public CrossReference getRepresentationRepresentationCrossReference_3_0() { return cRepresentationRepresentationCrossReference_3_0; }

		//ID
		public RuleCall getRepresentationRepresentationIDTerminalRuleCall_3_0_1() { return cRepresentationRepresentationIDTerminalRuleCall_3_0_1; }

		//"by"
		public Keyword getByKeyword_4() { return cByKeyword_4; }

		//methodName=ID
		public Assignment getMethodNameAssignment_5() { return cMethodNameAssignment_5; }

		//ID
		public RuleCall getMethodNameIDTerminalRuleCall_5_0() { return cMethodNameIDTerminalRuleCall_5_0; }

		//("," methodNameOut=ID)?
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//methodNameOut=ID
		public Assignment getMethodNameOutAssignment_6_1() { return cMethodNameOutAssignment_6_1; }

		//ID
		public RuleCall getMethodNameOutIDTerminalRuleCall_6_1_0() { return cMethodNameOutIDTerminalRuleCall_6_1_0; }

		//"with"
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_8() { return cParameterAssignment_8; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_8_0() { return cParameterParameterParserRuleCall_8_0; }

		//("," parameter+=Parameter)*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//parameter+=Parameter
		public Assignment getParameterAssignment_9_1() { return cParameterAssignment_9_1; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_9_1_0() { return cParameterParameterParserRuleCall_9_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDatafieldAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDatafieldDatafieldCrossReference_1_0 = (CrossReference)cDatafieldAssignment_1.eContents().get(0);
		private final RuleCall cDatafieldDatafieldIDTerminalRuleCall_1_0_1 = (RuleCall)cDatafieldDatafieldCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cArgumentTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cArgumentTypeArgumentTypeEnumRuleCall_2_1_0 = (RuleCall)cArgumentTypeAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Parameter:
		//	"(" datafield=[Datafield] ("as" argumentType=ArgumentType)? ")";
		public ParserRule getRule() { return rule; }

		//"(" datafield=[Datafield] ("as" argumentType=ArgumentType)? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//datafield=[Datafield]
		public Assignment getDatafieldAssignment_1() { return cDatafieldAssignment_1; }

		//[Datafield]
		public CrossReference getDatafieldDatafieldCrossReference_1_0() { return cDatafieldDatafieldCrossReference_1_0; }

		//ID
		public RuleCall getDatafieldDatafieldIDTerminalRuleCall_1_0_1() { return cDatafieldDatafieldIDTerminalRuleCall_1_0_1; }

		//("as" argumentType=ArgumentType)?
		public Group getGroup_2() { return cGroup_2; }

		//"as"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//argumentType=ArgumentType
		public Assignment getArgumentTypeAssignment_2_1() { return cArgumentTypeAssignment_2_1; }

		//ArgumentType
		public RuleCall getArgumentTypeArgumentTypeEnumRuleCall_2_1_0() { return cArgumentTypeArgumentTypeEnumRuleCall_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class DatastructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Datastructure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDatafieldsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDatafieldsDatafieldParserRuleCall_3_0 = (RuleCall)cDatafieldsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Datastructure:
		//	"structure" name=ID "{" datafields+=Datafield* "}";
		public ParserRule getRule() { return rule; }

		//"structure" name=ID "{" datafields+=Datafield* "}"
		public Group getGroup() { return cGroup; }

		//"structure"
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//datafields+=Datafield*
		public Assignment getDatafieldsAssignment_3() { return cDatafieldsAssignment_3; }

		//Datafield
		public RuleCall getDatafieldsDatafieldParserRuleCall_3_0() { return cDatafieldsDatafieldParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cOfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cScaleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cScaleDOUBLEParserRuleCall_3_1_0 = (RuleCall)cScaleAssignment_3_1.eContents().get(0);
		private final Assignment cUnitAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cUnitSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cUnitAssignment_3_2.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRepresentationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRepresentationRepresentationCrossReference_5_0 = (CrossReference)cRepresentationAssignment_5.eContents().get(0);
		private final RuleCall cRepresentationRepresentationIDTerminalRuleCall_5_0_1 = (RuleCall)cRepresentationRepresentationCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cBitKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cNumberingKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cBitNumberingAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cBitNumberingBitNumberingEnumRuleCall_6_3_0 = (RuleCall)cBitNumberingAssignment_6_3.eContents().get(0);
		private final Assignment cConstraintsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cConstraintsDataConstraintParserRuleCall_7_0 = (RuleCall)cConstraintsAssignment_7.eContents().get(0);
		
		/// *
		// * Einheiten noch als String
		// * / Data:
		//	"data" "of" name=ID ("in" scale=DOUBLE? unit=STRING)? "as" representation=[Representation] ("with" "bit" "numbering"
		//	bitNumbering=BitNumbering)? constraints+=DataConstraint*;
		public ParserRule getRule() { return rule; }

		//"data" "of" name=ID ("in" scale=DOUBLE? unit=STRING)? "as" representation=[Representation] ("with" "bit" "numbering"
		//bitNumbering=BitNumbering)? constraints+=DataConstraint*
		public Group getGroup() { return cGroup; }

		//"data"
		public Keyword getDataKeyword_0() { return cDataKeyword_0; }

		//"of"
		public Keyword getOfKeyword_1() { return cOfKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("in" scale=DOUBLE? unit=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"in"
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }

		//scale=DOUBLE?
		public Assignment getScaleAssignment_3_1() { return cScaleAssignment_3_1; }

		//DOUBLE
		public RuleCall getScaleDOUBLEParserRuleCall_3_1_0() { return cScaleDOUBLEParserRuleCall_3_1_0; }

		//unit=STRING
		public Assignment getUnitAssignment_3_2() { return cUnitAssignment_3_2; }

		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_3_2_0() { return cUnitSTRINGTerminalRuleCall_3_2_0; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//representation=[Representation]
		public Assignment getRepresentationAssignment_5() { return cRepresentationAssignment_5; }

		//[Representation]
		public CrossReference getRepresentationRepresentationCrossReference_5_0() { return cRepresentationRepresentationCrossReference_5_0; }

		//ID
		public RuleCall getRepresentationRepresentationIDTerminalRuleCall_5_0_1() { return cRepresentationRepresentationIDTerminalRuleCall_5_0_1; }

		//("with" "bit" "numbering" bitNumbering=BitNumbering)?
		public Group getGroup_6() { return cGroup_6; }

		//"with"
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//"bit"
		public Keyword getBitKeyword_6_1() { return cBitKeyword_6_1; }

		//"numbering"
		public Keyword getNumberingKeyword_6_2() { return cNumberingKeyword_6_2; }

		//bitNumbering=BitNumbering
		public Assignment getBitNumberingAssignment_6_3() { return cBitNumberingAssignment_6_3; }

		//BitNumbering
		public RuleCall getBitNumberingBitNumberingEnumRuleCall_6_3_0() { return cBitNumberingBitNumberingEnumRuleCall_6_3_0; }

		//constraints+=DataConstraint*
		public Assignment getConstraintsAssignment_7() { return cConstraintsAssignment_7; }

		//DataConstraint
		public RuleCall getConstraintsDataConstraintParserRuleCall_7_0() { return cConstraintsDataConstraintParserRuleCall_7_0; }
	}

	public class DataConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataConstraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataAdaptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataConstraint:
		//	DataRange | DataAdaption;
		public ParserRule getRule() { return rule; }

		//DataRange | DataAdaption
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataRange
		public RuleCall getDataRangeParserRuleCall_0() { return cDataRangeParserRuleCall_0; }

		//DataAdaption
		public RuleCall getDataAdaptionParserRuleCall_1() { return cDataAdaptionParserRuleCall_1; }
	}

	public class DataRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundBoundParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundBoundParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		
		//DataRange:
		//	"from" lowerBound=Bound "to" upperBound=Bound;
		public ParserRule getRule() { return rule; }

		//"from" lowerBound=Bound "to" upperBound=Bound
		public Group getGroup() { return cGroup; }

		//"from"
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }

		//lowerBound=Bound
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//Bound
		public RuleCall getLowerBoundBoundParserRuleCall_1_0() { return cLowerBoundBoundParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//upperBound=Bound
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//Bound
		public RuleCall getUpperBoundBoundParserRuleCall_3_0() { return cUpperBoundBoundParserRuleCall_3_0; }
	}

	public class DataAdaptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataAdaption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cScalingFactorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScalingFactorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScalingFactorDOUBLEParserRuleCall_3_0 = (RuleCall)cScalingFactorAssignment_3.eContents().get(0);
		private final Keyword cAndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cOffsetKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cColonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cOffsetAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cOffsetDOUBLEParserRuleCall_7_0 = (RuleCall)cOffsetAssignment_7.eContents().get(0);
		
		/// **
		// * Konkrete Fall eines MeasurementConstraints.
		// * Wertadaption durch Skalierungsfaktor "scalingFactor" und dem Offset "offset".
		// * / DataAdaption:
		//	"with" "scaling factor" ":" scalingFactor=DOUBLE "and" "offset" ":" offset=DOUBLE;
		public ParserRule getRule() { return rule; }

		//"with" "scaling factor" ":" scalingFactor=DOUBLE "and" "offset" ":" offset=DOUBLE
		public Group getGroup() { return cGroup; }

		//"with"
		public Keyword getWithKeyword_0() { return cWithKeyword_0; }

		//"scaling factor"
		public Keyword getScalingFactorKeyword_1() { return cScalingFactorKeyword_1; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//scalingFactor=DOUBLE
		public Assignment getScalingFactorAssignment_3() { return cScalingFactorAssignment_3; }

		//DOUBLE
		public RuleCall getScalingFactorDOUBLEParserRuleCall_3_0() { return cScalingFactorDOUBLEParserRuleCall_3_0; }

		//"and"
		public Keyword getAndKeyword_4() { return cAndKeyword_4; }

		//"offset"
		public Keyword getOffsetKeyword_5() { return cOffsetKeyword_5; }

		//":"
		public Keyword getColonKeyword_6() { return cColonKeyword_6; }

		//offset=DOUBLE
		public Assignment getOffsetAssignment_7() { return cOffsetAssignment_7; }

		//DOUBLE
		public RuleCall getOffsetDOUBLEParserRuleCall_7_0() { return cOffsetDOUBLEParserRuleCall_7_0; }
	}

	public class BoundElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Bound");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueDOUBLEParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnitSTRINGTerminalRuleCall_1_0 = (RuleCall)cUnitAssignment_1.eContents().get(0);
		
		/// *
		// * Einheiten noch als String
		// * / Bound:
		//	value=DOUBLE unit=STRING;
		public ParserRule getRule() { return rule; }

		//value=DOUBLE unit=STRING
		public Group getGroup() { return cGroup; }

		//value=DOUBLE
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//DOUBLE
		public RuleCall getValueDOUBLEParserRuleCall_0_0() { return cValueDOUBLEParserRuleCall_0_0; }

		//unit=STRING
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//STRING
		public RuleCall getUnitSTRINGTerminalRuleCall_1_0() { return cUnitSTRINGTerminalRuleCall_1_0; }
	}

	public class MetadataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Metadata");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPrimitiveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRepresentationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRepresentationRepresentationCrossReference_4_0 = (CrossReference)cRepresentationAssignment_4.eContents().get(0);
		private final RuleCall cRepresentationRepresentationIDTerminalRuleCall_4_0_1 = (RuleCall)cRepresentationRepresentationCrossReference_4_0.eContents().get(1);
		
		//Metadata:
		//	"primitive" type=Type name=ID "as" representation=[Representation];
		public ParserRule getRule() { return rule; }

		//"primitive" type=Type name=ID "as" representation=[Representation]
		public Group getGroup() { return cGroup; }

		//"primitive"
		public Keyword getPrimitiveKeyword_0() { return cPrimitiveKeyword_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeEnumRuleCall_1_0() { return cTypeTypeEnumRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"as"
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }

		//representation=[Representation]
		public Assignment getRepresentationAssignment_4() { return cRepresentationAssignment_4; }

		//[Representation]
		public CrossReference getRepresentationRepresentationCrossReference_4_0() { return cRepresentationRepresentationCrossReference_4_0; }

		//ID
		public RuleCall getRepresentationRepresentationIDTerminalRuleCall_4_0_1() { return cRepresentationRepresentationIDTerminalRuleCall_4_0_1; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DOUBLE returns ecore::EDouble:
		//	INT ("." INT)?;
		public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}
	
	
	public class GenerationLanguageElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "GenerationLanguage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJAVAEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJAVAJAVAKeyword_0_0 = (Keyword)cJAVAEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCPPEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCPPCPPKeyword_1_0 = (Keyword)cCPPEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCCKeyword_2_0 = (Keyword)cCEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCSHARPEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCSHARPCSHARPKeyword_3_0 = (Keyword)cCSHARPEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum GenerationLanguage:
		//	JAVA | CPP | C | CSHARP;
		public EnumRule getRule() { return rule; }

		//JAVA | CPP | C | CSHARP
		public Alternatives getAlternatives() { return cAlternatives; }

		//JAVA
		public EnumLiteralDeclaration getJAVAEnumLiteralDeclaration_0() { return cJAVAEnumLiteralDeclaration_0; }

		//"JAVA"
		public Keyword getJAVAJAVAKeyword_0_0() { return cJAVAJAVAKeyword_0_0; }

		//CPP
		public EnumLiteralDeclaration getCPPEnumLiteralDeclaration_1() { return cCPPEnumLiteralDeclaration_1; }

		//"CPP"
		public Keyword getCPPCPPKeyword_1_0() { return cCPPCPPKeyword_1_0; }

		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_2() { return cCEnumLiteralDeclaration_2; }

		//"C"
		public Keyword getCCKeyword_2_0() { return cCCKeyword_2_0; }

		//CSHARP
		public EnumLiteralDeclaration getCSHARPEnumLiteralDeclaration_3() { return cCSHARPEnumLiteralDeclaration_3; }

		//"CSHARP"
		public Keyword getCSHARPCSHARPKeyword_3_0() { return cCSHARPCSHARPKeyword_3_0; }
	}

	public class ArgumentTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ArgumentType");
		private final EnumLiteralDeclaration cBYTE_ARRAYEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cBYTE_ARRAYBYTE_ARRAYKeyword_0 = (Keyword)cBYTE_ARRAYEnumLiteralDeclaration.eContents().get(0);
		
		/// *
		// * Die EEnums und EEnumLiterals können direkt so ausgedrückt werden.
		// * / enum ArgumentType:
		//	BYTE_ARRAY;
		public EnumRule getRule() { return rule; }

		//BYTE_ARRAY
		public EnumLiteralDeclaration getBYTE_ARRAYEnumLiteralDeclaration() { return cBYTE_ARRAYEnumLiteralDeclaration; }

		//"BYTE_ARRAY"
		public Keyword getBYTE_ARRAYBYTE_ARRAYKeyword_0() { return cBYTE_ARRAYBYTE_ARRAYKeyword_0; }
	}

	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLBOOLKeyword_0_0 = (Keyword)cBOOLEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCHARCHARKeyword_1_0 = (Keyword)cCHAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSHORTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSHORTSHORTKeyword_2_0 = (Keyword)cSHORTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTINTKeyword_3_0 = (Keyword)cINTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cLONGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cLONGLONGKeyword_4_0 = (Keyword)cLONGEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLONGLONGEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLONGLONGLONGLONGKeyword_5_0 = (Keyword)cLONGLONGEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFLOATFLOATKeyword_6_0 = (Keyword)cFLOATEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cDOUBLEDOUBLEKeyword_7_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cLONGDOUBLEEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cLONGDOUBLELONGDOUBLEKeyword_8_0 = (Keyword)cLONGDOUBLEEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum Type:
		//	BOOL | CHAR | SHORT | INT | LONG | LONGLONG | FLOAT | DOUBLE | LONGDOUBLE;
		public EnumRule getRule() { return rule; }

		//BOOL | CHAR | SHORT | INT | LONG | LONGLONG | FLOAT | DOUBLE | LONGDOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOL
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_0() { return cBOOLEnumLiteralDeclaration_0; }

		//"BOOL"
		public Keyword getBOOLBOOLKeyword_0_0() { return cBOOLBOOLKeyword_0_0; }

		//CHAR
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_1() { return cCHAREnumLiteralDeclaration_1; }

		//"CHAR"
		public Keyword getCHARCHARKeyword_1_0() { return cCHARCHARKeyword_1_0; }

		//SHORT
		public EnumLiteralDeclaration getSHORTEnumLiteralDeclaration_2() { return cSHORTEnumLiteralDeclaration_2; }

		//"SHORT"
		public Keyword getSHORTSHORTKeyword_2_0() { return cSHORTSHORTKeyword_2_0; }

		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_3() { return cINTEnumLiteralDeclaration_3; }

		//"INT"
		public Keyword getINTINTKeyword_3_0() { return cINTINTKeyword_3_0; }

		//LONG
		public EnumLiteralDeclaration getLONGEnumLiteralDeclaration_4() { return cLONGEnumLiteralDeclaration_4; }

		//"LONG"
		public Keyword getLONGLONGKeyword_4_0() { return cLONGLONGKeyword_4_0; }

		//LONGLONG
		public EnumLiteralDeclaration getLONGLONGEnumLiteralDeclaration_5() { return cLONGLONGEnumLiteralDeclaration_5; }

		//"LONGLONG"
		public Keyword getLONGLONGLONGLONGKeyword_5_0() { return cLONGLONGLONGLONGKeyword_5_0; }

		//FLOAT
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_6() { return cFLOATEnumLiteralDeclaration_6; }

		//"FLOAT"
		public Keyword getFLOATFLOATKeyword_6_0() { return cFLOATFLOATKeyword_6_0; }

		//DOUBLE
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_7() { return cDOUBLEEnumLiteralDeclaration_7; }

		//"DOUBLE"
		public Keyword getDOUBLEDOUBLEKeyword_7_0() { return cDOUBLEDOUBLEKeyword_7_0; }

		//LONGDOUBLE
		public EnumLiteralDeclaration getLONGDOUBLEEnumLiteralDeclaration_8() { return cLONGDOUBLEEnumLiteralDeclaration_8; }

		//"LONGDOUBLE"
		public Keyword getLONGDOUBLELONGDOUBLEKeyword_8_0() { return cLONGDOUBLELONGDOUBLEKeyword_8_0; }
	}

	public class BitNumberingElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BitNumbering");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLSBEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLSBLSBKeyword_0_0 = (Keyword)cLSBEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMSBEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMSBMSBKeyword_1_0 = (Keyword)cMSBEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BitNumbering:
		//	LSB | MSB;
		public EnumRule getRule() { return rule; }

		//LSB | MSB
		public Alternatives getAlternatives() { return cAlternatives; }

		//LSB
		public EnumLiteralDeclaration getLSBEnumLiteralDeclaration_0() { return cLSBEnumLiteralDeclaration_0; }

		//"LSB"
		public Keyword getLSBLSBKeyword_0_0() { return cLSBLSBKeyword_0_0; }

		//MSB
		public EnumLiteralDeclaration getMSBEnumLiteralDeclaration_1() { return cMSBEnumLiteralDeclaration_1; }

		//"MSB"
		public Keyword getMSBMSBKeyword_1_0() { return cMSBMSBKeyword_1_0; }
	}
	
	private final DataModelElements pDataModel;
	private final OptionsElements pOptions;
	private final GenerationLanguageElements unknownRuleGenerationLanguage;
	private final RepresentationElements pRepresentation;
	private final DatafieldElements pDatafield;
	private final CalculatedElements pCalculated;
	private final ParameterElements pParameter;
	private final DatastructureElements pDatastructure;
	private final DataElements pData;
	private final DataConstraintElements pDataConstraint;
	private final DataRangeElements pDataRange;
	private final DataAdaptionElements pDataAdaption;
	private final BoundElements pBound;
	private final MetadataElements pMetadata;
	private final DOUBLEElements pDOUBLE;
	private final ArgumentTypeElements unknownRuleArgumentType;
	private final TypeElements unknownRuleType;
	private final BitNumberingElements unknownRuleBitNumbering;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SensidlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataModel = new DataModelElements();
		this.pOptions = new OptionsElements();
		this.unknownRuleGenerationLanguage = new GenerationLanguageElements();
		this.pRepresentation = new RepresentationElements();
		this.pDatafield = new DatafieldElements();
		this.pCalculated = new CalculatedElements();
		this.pParameter = new ParameterElements();
		this.pDatastructure = new DatastructureElements();
		this.pData = new DataElements();
		this.pDataConstraint = new DataConstraintElements();
		this.pDataRange = new DataRangeElements();
		this.pDataAdaption = new DataAdaptionElements();
		this.pBound = new BoundElements();
		this.pMetadata = new MetadataElements();
		this.pDOUBLE = new DOUBLEElements();
		this.unknownRuleArgumentType = new ArgumentTypeElements();
		this.unknownRuleType = new TypeElements();
		this.unknownRuleBitNumbering = new BitNumberingElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fzi.sensidl.language.Sensidl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataModel:
	//	"datamodel" "{" "options" "{" options=Options "}" (representations+=Representation | datafields+=Datafield)*
	//	"transmit" transmit+=[Datafield] ("," transmit+=[Datafield])* "}";
	public DataModelElements getDataModelAccess() {
		return pDataModel;
	}
	
	public ParserRule getDataModelRule() {
		return getDataModelAccess().getRule();
	}

	//Options:
	//	{Options} ("sensor" "language" ":" sensorLanguage=GenerationLanguage | "receiver" "language" ":"
	//	receiverLanguage=GenerationLanguage)*;
	public OptionsElements getOptionsAccess() {
		return pOptions;
	}
	
	public ParserRule getOptionsRule() {
		return getOptionsAccess().getRule();
	}

	//enum GenerationLanguage:
	//	JAVA | CPP | C | CSHARP;
	public GenerationLanguageElements getGenerationLanguageAccess() {
		return unknownRuleGenerationLanguage;
	}
	
	public EnumRule getGenerationLanguageRule() {
		return getGenerationLanguageAccess().getRule();
	}

	//Representation:
	//	("repr" | "representation") name=ID "is" byteCount=INT ("bytes" | "byte") "in" type=Type;
	public RepresentationElements getRepresentationAccess() {
		return pRepresentation;
	}
	
	public ParserRule getRepresentationRule() {
		return getRepresentationAccess().getRule();
	}

	//Datafield:
	//	Metadata | Data | Datastructure | Calculated;
	public DatafieldElements getDatafieldAccess() {
		return pDatafield;
	}
	
	public ParserRule getDatafieldRule() {
		return getDatafieldAccess().getRule();
	}

	//Calculated:
	//	("calculate" | "calculated") name=ID "as" representation=[Representation] "by" methodName=ID ("," methodNameOut=ID)?
	//	"with" parameter+=Parameter ("," parameter+=Parameter)*;
	public CalculatedElements getCalculatedAccess() {
		return pCalculated;
	}
	
	public ParserRule getCalculatedRule() {
		return getCalculatedAccess().getRule();
	}

	//Parameter:
	//	"(" datafield=[Datafield] ("as" argumentType=ArgumentType)? ")";
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Datastructure:
	//	"structure" name=ID "{" datafields+=Datafield* "}";
	public DatastructureElements getDatastructureAccess() {
		return pDatastructure;
	}
	
	public ParserRule getDatastructureRule() {
		return getDatastructureAccess().getRule();
	}

	/// *
	// * Einheiten noch als String
	// * / Data:
	//	"data" "of" name=ID ("in" scale=DOUBLE? unit=STRING)? "as" representation=[Representation] ("with" "bit" "numbering"
	//	bitNumbering=BitNumbering)? constraints+=DataConstraint*;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}

	//DataConstraint:
	//	DataRange | DataAdaption;
	public DataConstraintElements getDataConstraintAccess() {
		return pDataConstraint;
	}
	
	public ParserRule getDataConstraintRule() {
		return getDataConstraintAccess().getRule();
	}

	//DataRange:
	//	"from" lowerBound=Bound "to" upperBound=Bound;
	public DataRangeElements getDataRangeAccess() {
		return pDataRange;
	}
	
	public ParserRule getDataRangeRule() {
		return getDataRangeAccess().getRule();
	}

	/// **
	// * Konkrete Fall eines MeasurementConstraints.
	// * Wertadaption durch Skalierungsfaktor "scalingFactor" und dem Offset "offset".
	// * / DataAdaption:
	//	"with" "scaling factor" ":" scalingFactor=DOUBLE "and" "offset" ":" offset=DOUBLE;
	public DataAdaptionElements getDataAdaptionAccess() {
		return pDataAdaption;
	}
	
	public ParserRule getDataAdaptionRule() {
		return getDataAdaptionAccess().getRule();
	}

	/// *
	// * Einheiten noch als String
	// * / Bound:
	//	value=DOUBLE unit=STRING;
	public BoundElements getBoundAccess() {
		return pBound;
	}
	
	public ParserRule getBoundRule() {
		return getBoundAccess().getRule();
	}

	//Metadata:
	//	"primitive" type=Type name=ID "as" representation=[Representation];
	public MetadataElements getMetadataAccess() {
		return pMetadata;
	}
	
	public ParserRule getMetadataRule() {
		return getMetadataAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	INT ("." INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	/// *
	// * Die EEnums und EEnumLiterals können direkt so ausgedrückt werden.
	// * / enum ArgumentType:
	//	BYTE_ARRAY;
	public ArgumentTypeElements getArgumentTypeAccess() {
		return unknownRuleArgumentType;
	}
	
	public EnumRule getArgumentTypeRule() {
		return getArgumentTypeAccess().getRule();
	}

	//enum Type:
	//	BOOL | CHAR | SHORT | INT | LONG | LONGLONG | FLOAT | DOUBLE | LONGDOUBLE;
	public TypeElements getTypeAccess() {
		return unknownRuleType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//enum BitNumbering:
	//	LSB | MSB;
	public BitNumberingElements getBitNumberingAccess() {
		return unknownRuleBitNumbering;
	}
	
	public EnumRule getBitNumberingRule() {
		return getBitNumberingAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
