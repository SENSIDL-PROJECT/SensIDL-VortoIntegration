/*
 * generated by Xtext
 */
package de.fzi.sensidl.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SensidlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SensorInterfaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SensorInterface");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorInterfaceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionDESCRIPTIONTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithIdentifierKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIDAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cIDAssignment_3_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEncodingSettingsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEncodingSettingsEncodingSettingsParserRuleCall_5_0 = (RuleCall)cEncodingSettingsAssignment_5.eContents().get(0);
		private final Assignment cDataDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDataDescriptionSensorDataDescriptionParserRuleCall_6_0 = (RuleCall)cDataDescriptionAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SensorInterface returns sensidl::SensorInterface:
		//	"sensorInterface" name=ID description=DESCRIPTION? ("with identifier" ":" ID=STRING)? "{"
		//	encodingSettings=EncodingSettings dataDescription=SensorDataDescription "}";
		@Override public ParserRule getRule() { return rule; }

		//"sensorInterface" name=ID description=DESCRIPTION? ("with identifier" ":" ID=STRING)? "{"
		//encodingSettings=EncodingSettings dataDescription=SensorDataDescription "}"
		public Group getGroup() { return cGroup; }

		//"sensorInterface"
		public Keyword getSensorInterfaceKeyword_0() { return cSensorInterfaceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//description=DESCRIPTION?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }

		//DESCRIPTION
		public RuleCall getDescriptionDESCRIPTIONTerminalRuleCall_2_0() { return cDescriptionDESCRIPTIONTerminalRuleCall_2_0; }

		//("with identifier" ":" ID=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"with identifier"
		public Keyword getWithIdentifierKeyword_3_0() { return cWithIdentifierKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//ID=STRING
		public Assignment getIDAssignment_3_2() { return cIDAssignment_3_2; }

		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_3_2_0() { return cIDSTRINGTerminalRuleCall_3_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//encodingSettings=EncodingSettings
		public Assignment getEncodingSettingsAssignment_5() { return cEncodingSettingsAssignment_5; }

		//EncodingSettings
		public RuleCall getEncodingSettingsEncodingSettingsParserRuleCall_5_0() { return cEncodingSettingsEncodingSettingsParserRuleCall_5_0; }

		//dataDescription=SensorDataDescription
		public Assignment getDataDescriptionAssignment_6() { return cDataDescriptionAssignment_6; }

		//SensorDataDescription
		public RuleCall getDataDescriptionSensorDataDescriptionParserRuleCall_6_0() { return cDataDescriptionSensorDataDescriptionParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class EncodingSettingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EncodingSettings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEncodingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCodingAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCodingCodingEnumRuleCall_2_0 = (RuleCall)cCodingAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cEndiannessKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cEndiannessAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndiannessEndiannessEnumRuleCall_6_0 = (RuleCall)cEndiannessAssignment_6.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAlignmentKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cColonKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAlignmentAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cAlignmentINTTerminalRuleCall_10_0 = (RuleCall)cAlignmentAssignment_10.eContents().get(0);
		private final Keyword cBITKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cWithIdentifierKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Keyword cColonKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cIDAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_12_2_0 = (RuleCall)cIDAssignment_12_2.eContents().get(0);
		
		//EncodingSettings returns sensidl::EncodingSettings:
		//	"encoding" ":" coding=Coding "," "endianness" ":" endianness=Endianness "," "alignment" ":" alignment=INT "BIT"
		//	("with identifier" ":" ID=STRING)?;
		@Override public ParserRule getRule() { return rule; }

		//"encoding" ":" coding=Coding "," "endianness" ":" endianness=Endianness "," "alignment" ":" alignment=INT "BIT"
		//("with identifier" ":" ID=STRING)?
		public Group getGroup() { return cGroup; }

		//"encoding"
		public Keyword getEncodingKeyword_0() { return cEncodingKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//coding=Coding
		public Assignment getCodingAssignment_2() { return cCodingAssignment_2; }

		//Coding
		public RuleCall getCodingCodingEnumRuleCall_2_0() { return cCodingCodingEnumRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"endianness"
		public Keyword getEndiannessKeyword_4() { return cEndiannessKeyword_4; }

		//":"
		public Keyword getColonKeyword_5() { return cColonKeyword_5; }

		//endianness=Endianness
		public Assignment getEndiannessAssignment_6() { return cEndiannessAssignment_6; }

		//Endianness
		public RuleCall getEndiannessEndiannessEnumRuleCall_6_0() { return cEndiannessEndiannessEnumRuleCall_6_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//"alignment"
		public Keyword getAlignmentKeyword_8() { return cAlignmentKeyword_8; }

		//":"
		public Keyword getColonKeyword_9() { return cColonKeyword_9; }

		//alignment=INT
		public Assignment getAlignmentAssignment_10() { return cAlignmentAssignment_10; }

		//INT
		public RuleCall getAlignmentINTTerminalRuleCall_10_0() { return cAlignmentINTTerminalRuleCall_10_0; }

		//"BIT"
		public Keyword getBITKeyword_11() { return cBITKeyword_11; }

		//("with identifier" ":" ID=STRING)?
		public Group getGroup_12() { return cGroup_12; }

		//"with identifier"
		public Keyword getWithIdentifierKeyword_12_0() { return cWithIdentifierKeyword_12_0; }

		//":"
		public Keyword getColonKeyword_12_1() { return cColonKeyword_12_1; }

		//ID=STRING
		public Assignment getIDAssignment_12_2() { return cIDAssignment_12_2; }

		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_12_2_0() { return cIDSTRINGTerminalRuleCall_12_2_0; }
	}

	public class SensorDataDescriptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SensorDataDescription");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorDataKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cSensorDataDescriptionAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWithIdentifierKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIDAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cIDAssignment_2_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDataSetsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDataSetsDataSetParserRuleCall_4_0 = (RuleCall)cDataSetsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SensorDataDescription returns dataRepresentation::SensorDataDescription:
		//	"sensorData" {dataRepresentation::SensorDataDescription} ("with identifier" ":" ID=STRING)? "{" dataSets+=DataSet*
		//	"}";
		@Override public ParserRule getRule() { return rule; }

		//"sensorData" {dataRepresentation::SensorDataDescription} ("with identifier" ":" ID=STRING)? "{" dataSets+=DataSet* "}"
		public Group getGroup() { return cGroup; }

		//"sensorData"
		public Keyword getSensorDataKeyword_0() { return cSensorDataKeyword_0; }

		//{dataRepresentation::SensorDataDescription}
		public Action getSensorDataDescriptionAction_1() { return cSensorDataDescriptionAction_1; }

		//("with identifier" ":" ID=STRING)?
		public Group getGroup_2() { return cGroup_2; }

		//"with identifier"
		public Keyword getWithIdentifierKeyword_2_0() { return cWithIdentifierKeyword_2_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//ID=STRING
		public Assignment getIDAssignment_2_2() { return cIDAssignment_2_2; }

		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_2_2_0() { return cIDSTRINGTerminalRuleCall_2_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//dataSets+=DataSet*
		public Assignment getDataSetsAssignment_4() { return cDataSetsAssignment_4; }

		//DataSet
		public RuleCall getDataSetsDataSetParserRuleCall_4_0() { return cDataSetsDataSetParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class DataSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cUsesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cParentDataSetAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cParentDataSetDataSetCrossReference_2_1_0 = (CrossReference)cParentDataSetAssignment_2_1.eContents().get(0);
		private final RuleCall cParentDataSetDataSetIDTerminalRuleCall_2_1_0_1 = (RuleCall)cParentDataSetDataSetCrossReference_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cWithIdentifierKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIDAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_3_2_0 = (RuleCall)cIDAssignment_3_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDescriptionDESCRIPTIONTerminalRuleCall_4_0 = (RuleCall)cDescriptionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDataAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDataDataParserRuleCall_6_0 = (RuleCall)cDataAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DataSet returns dataRepresentation::DataSet:
		//	"dataSet" name=ID ("uses" parentDataSet=[dataRepresentation::DataSet])? ("with identifier" ":" ID=STRING)?
		//	description=DESCRIPTION? "{" data+=Data* "}";
		@Override public ParserRule getRule() { return rule; }

		//"dataSet" name=ID ("uses" parentDataSet=[dataRepresentation::DataSet])? ("with identifier" ":" ID=STRING)?
		//description=DESCRIPTION? "{" data+=Data* "}"
		public Group getGroup() { return cGroup; }

		//"dataSet"
		public Keyword getDataSetKeyword_0() { return cDataSetKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("uses" parentDataSet=[dataRepresentation::DataSet])?
		public Group getGroup_2() { return cGroup_2; }

		//"uses"
		public Keyword getUsesKeyword_2_0() { return cUsesKeyword_2_0; }

		//parentDataSet=[dataRepresentation::DataSet]
		public Assignment getParentDataSetAssignment_2_1() { return cParentDataSetAssignment_2_1; }

		//[dataRepresentation::DataSet]
		public CrossReference getParentDataSetDataSetCrossReference_2_1_0() { return cParentDataSetDataSetCrossReference_2_1_0; }

		//ID
		public RuleCall getParentDataSetDataSetIDTerminalRuleCall_2_1_0_1() { return cParentDataSetDataSetIDTerminalRuleCall_2_1_0_1; }

		//("with identifier" ":" ID=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"with identifier"
		public Keyword getWithIdentifierKeyword_3_0() { return cWithIdentifierKeyword_3_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//ID=STRING
		public Assignment getIDAssignment_3_2() { return cIDAssignment_3_2; }

		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_3_2_0() { return cIDSTRINGTerminalRuleCall_3_2_0; }

		//description=DESCRIPTION?
		public Assignment getDescriptionAssignment_4() { return cDescriptionAssignment_4; }

		//DESCRIPTION
		public RuleCall getDescriptionDESCRIPTIONTerminalRuleCall_4_0() { return cDescriptionDESCRIPTIONTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//data+=Data*
		public Assignment getDataAssignment_6() { return cDataAssignment_6; }

		//Data
		public RuleCall getDataDataParserRuleCall_6_0() { return cDataDataParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Data");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMeasurementDataParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNonMeasurementDataParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMeasurementDataNotAdjustableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Data returns dataRepresentation::Data:
		//	MeasurementData | NonMeasurementData | MeasurementDataNotAdjustable;
		@Override public ParserRule getRule() { return rule; }

		//MeasurementData | NonMeasurementData | MeasurementDataNotAdjustable
		public Alternatives getAlternatives() { return cAlternatives; }

		//MeasurementData
		public RuleCall getMeasurementDataParserRuleCall_0() { return cMeasurementDataParserRuleCall_0; }

		//NonMeasurementData
		public RuleCall getNonMeasurementDataParserRuleCall_1() { return cNonMeasurementDataParserRuleCall_1; }

		//MeasurementDataNotAdjustable
		public RuleCall getMeasurementDataNotAdjustableParserRuleCall_2() { return cMeasurementDataNotAdjustableParserRuleCall_2; }
	}

	public class MeasurementDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitUNITParserRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithIdentifierKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cIDAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cIDAssignment_5_2.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAdjustedKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cAdjustmentsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cAdjustmentsDataAdjustmentParserRuleCall_6_1_0 = (RuleCall)cAdjustmentsAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cAdjustmentsAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cAdjustmentsDataAdjustmentParserRuleCall_6_2_1_0 = (RuleCall)cAdjustmentsAssignment_6_2_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDescriptionDESCRIPTIONTerminalRuleCall_7_0 = (RuleCall)cDescriptionAssignment_7.eContents().get(0);
		
		//MeasurementData returns dataRepresentation::MeasurementData:
		//	name=ID "as" dataType=DataType "in" unit=UNIT ("with identifier" ":" ID=STRING)? ("adjusted"
		//	adjustments+=DataAdjustment ("," adjustments+=DataAdjustment)*)? description=DESCRIPTION?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "as" dataType=DataType "in" unit=UNIT ("with identifier" ":" ID=STRING)? ("adjusted" adjustments+=DataAdjustment
		//("," adjustments+=DataAdjustment)*)? description=DESCRIPTION?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }

		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_2_0() { return cDataTypeDataTypeEnumRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//unit=UNIT
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }

		//UNIT
		public RuleCall getUnitUNITParserRuleCall_4_0() { return cUnitUNITParserRuleCall_4_0; }

		//("with identifier" ":" ID=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"with identifier"
		public Keyword getWithIdentifierKeyword_5_0() { return cWithIdentifierKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//ID=STRING
		public Assignment getIDAssignment_5_2() { return cIDAssignment_5_2; }

		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_5_2_0() { return cIDSTRINGTerminalRuleCall_5_2_0; }

		//("adjusted" adjustments+=DataAdjustment ("," adjustments+=DataAdjustment)*)?
		public Group getGroup_6() { return cGroup_6; }

		//"adjusted"
		public Keyword getAdjustedKeyword_6_0() { return cAdjustedKeyword_6_0; }

		//adjustments+=DataAdjustment
		public Assignment getAdjustmentsAssignment_6_1() { return cAdjustmentsAssignment_6_1; }

		//DataAdjustment
		public RuleCall getAdjustmentsDataAdjustmentParserRuleCall_6_1_0() { return cAdjustmentsDataAdjustmentParserRuleCall_6_1_0; }

		//("," adjustments+=DataAdjustment)*
		public Group getGroup_6_2() { return cGroup_6_2; }

		//","
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }

		//adjustments+=DataAdjustment
		public Assignment getAdjustmentsAssignment_6_2_1() { return cAdjustmentsAssignment_6_2_1; }

		//DataAdjustment
		public RuleCall getAdjustmentsDataAdjustmentParserRuleCall_6_2_1_0() { return cAdjustmentsDataAdjustmentParserRuleCall_6_2_1_0; }

		//description=DESCRIPTION?
		public Assignment getDescriptionAssignment_7() { return cDescriptionAssignment_7; }

		//DESCRIPTION
		public RuleCall getDescriptionDESCRIPTIONTerminalRuleCall_7_0() { return cDescriptionDESCRIPTIONTerminalRuleCall_7_0; }
	}

	public class NonMeasurementDataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonMeasurementData");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cDataTypeAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_2_0_0 = (RuleCall)cDataTypeAssignment_2_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cDataTypeDataTypeNotAdjustableEnumRuleCall_2_1_0 = (RuleCall)cDataTypeAssignment_2_1.eContents().get(0);
		private final Assignment cConstantAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cConstantConstantKeyword_3_0 = (Keyword)cConstantAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_4_2_0 = (RuleCall)cValueAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithIdentifierKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cIDAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cIDAssignment_5_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDESCRIPTIONTerminalRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		
		//NonMeasurementData returns dataRepresentation::NonMeasurementData:
		//	name=ID "as" (dataType=DataType | dataType=DataTypeNotAdjustable) constant?="constant"? ("value" "=" value=STRING)?
		//	("with identifier" ":" ID=STRING)? description=DESCRIPTION?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "as" (dataType=DataType | dataType=DataTypeNotAdjustable) constant?="constant"? ("value" "=" value=STRING)?
		//("with identifier" ":" ID=STRING)? description=DESCRIPTION?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//dataType=DataType | dataType=DataTypeNotAdjustable
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_2_0() { return cDataTypeAssignment_2_0; }

		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_2_0_0() { return cDataTypeDataTypeEnumRuleCall_2_0_0; }

		//dataType=DataTypeNotAdjustable
		public Assignment getDataTypeAssignment_2_1() { return cDataTypeAssignment_2_1; }

		//DataTypeNotAdjustable
		public RuleCall getDataTypeDataTypeNotAdjustableEnumRuleCall_2_1_0() { return cDataTypeDataTypeNotAdjustableEnumRuleCall_2_1_0; }

		//constant?="constant"?
		public Assignment getConstantAssignment_3() { return cConstantAssignment_3; }

		//"constant"
		public Keyword getConstantConstantKeyword_3_0() { return cConstantConstantKeyword_3_0; }

		//("value" "=" value=STRING)?
		public Group getGroup_4() { return cGroup_4; }

		//"value"
		public Keyword getValueKeyword_4_0() { return cValueKeyword_4_0; }

		//"="
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }

		//value=STRING
		public Assignment getValueAssignment_4_2() { return cValueAssignment_4_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_4_2_0() { return cValueSTRINGTerminalRuleCall_4_2_0; }

		//("with identifier" ":" ID=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"with identifier"
		public Keyword getWithIdentifierKeyword_5_0() { return cWithIdentifierKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//ID=STRING
		public Assignment getIDAssignment_5_2() { return cIDAssignment_5_2; }

		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_5_2_0() { return cIDSTRINGTerminalRuleCall_5_2_0; }

		//description=DESCRIPTION?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }

		//DESCRIPTION
		public RuleCall getDescriptionDESCRIPTIONTerminalRuleCall_6_0() { return cDescriptionDESCRIPTIONTerminalRuleCall_6_0; }
	}

	public class MeasurementDataNotAdjustableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MeasurementDataNotAdjustable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cAsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDataTypeDataTypeNotAdjustableEnumRuleCall_2_0 = (RuleCall)cDataTypeAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitUNITParserRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWithIdentifierKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cColonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cIDAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cIDSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cIDAssignment_5_2.eContents().get(0);
		private final Assignment cDescriptionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDescriptionDESCRIPTIONTerminalRuleCall_6_0 = (RuleCall)cDescriptionAssignment_6.eContents().get(0);
		
		//MeasurementDataNotAdjustable returns dataRepresentation::MeasurementData:
		//	name=ID "as" dataType=DataTypeNotAdjustable "in" unit=UNIT ("with identifier" ":" ID=STRING)?
		//	description=DESCRIPTION?;
		@Override public ParserRule getRule() { return rule; }

		//name=ID "as" dataType=DataTypeNotAdjustable "in" unit=UNIT ("with identifier" ":" ID=STRING)? description=DESCRIPTION?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"as"
		public Keyword getAsKeyword_1() { return cAsKeyword_1; }

		//dataType=DataTypeNotAdjustable
		public Assignment getDataTypeAssignment_2() { return cDataTypeAssignment_2; }

		//DataTypeNotAdjustable
		public RuleCall getDataTypeDataTypeNotAdjustableEnumRuleCall_2_0() { return cDataTypeDataTypeNotAdjustableEnumRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//unit=UNIT
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }

		//UNIT
		public RuleCall getUnitUNITParserRuleCall_4_0() { return cUnitUNITParserRuleCall_4_0; }

		//("with identifier" ":" ID=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"with identifier"
		public Keyword getWithIdentifierKeyword_5_0() { return cWithIdentifierKeyword_5_0; }

		//":"
		public Keyword getColonKeyword_5_1() { return cColonKeyword_5_1; }

		//ID=STRING
		public Assignment getIDAssignment_5_2() { return cIDAssignment_5_2; }

		//STRING
		public RuleCall getIDSTRINGTerminalRuleCall_5_2_0() { return cIDSTRINGTerminalRuleCall_5_2_0; }

		//description=DESCRIPTION?
		public Assignment getDescriptionAssignment_6() { return cDescriptionAssignment_6; }

		//DESCRIPTION
		public RuleCall getDescriptionDESCRIPTIONTerminalRuleCall_6_0() { return cDescriptionDESCRIPTIONTerminalRuleCall_6_0; }
	}

	public class DataAdjustmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataAdjustment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDataConversionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataAdjustment returns dataRepresentation::DataAdjustment:
		//	DataRange | DataConversion;
		@Override public ParserRule getRule() { return rule; }

		//DataRange | DataConversion
		public Alternatives getAlternatives() { return cAlternatives; }

		//DataRange
		public RuleCall getDataRangeParserRuleCall_0() { return cDataRangeParserRuleCall_0; }

		//DataConversion
		public RuleCall getDataConversionParserRuleCall_1() { return cDataConversionParserRuleCall_1; }
	}

	public class DataRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithRangeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRangeIntervalParserRuleCall_1_0 = (RuleCall)cRangeAssignment_1.eContents().get(0);
		
		//DataRange returns dataRepresentation::DataRange:
		//	"with range" range=Interval;
		@Override public ParserRule getRule() { return rule; }

		//"with range" range=Interval
		public Group getGroup() { return cGroup; }

		//"with range"
		public Keyword getWithRangeKeyword_0() { return cWithRangeKeyword_0; }

		//range=Interval
		public Assignment getRangeAssignment_1() { return cRangeAssignment_1; }

		//Interval
		public RuleCall getRangeIntervalParserRuleCall_1_0() { return cRangeIntervalParserRuleCall_1_0; }
	}

	public class IntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Interval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLowerBoundAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLowerBoundDOUBLEParserRuleCall_1_0 = (RuleCall)cLowerBoundAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cUpperBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUpperBoundDOUBLEParserRuleCall_3_0 = (RuleCall)cUpperBoundAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Interval returns dataRepresentation::Interval:
		//	"[" lowerBound=DOUBLE ";" upperBound=DOUBLE "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" lowerBound=DOUBLE ";" upperBound=DOUBLE "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//lowerBound=DOUBLE
		public Assignment getLowerBoundAssignment_1() { return cLowerBoundAssignment_1; }

		//DOUBLE
		public RuleCall getLowerBoundDOUBLEParserRuleCall_1_0() { return cLowerBoundDOUBLEParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }

		//upperBound=DOUBLE
		public Assignment getUpperBoundAssignment_3() { return cUpperBoundAssignment_3; }

		//DOUBLE
		public RuleCall getUpperBoundDOUBLEParserRuleCall_3_0() { return cUpperBoundDOUBLEParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class DataConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataConversion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLinearDataConversionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLinearDataConversionWithIntervalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//DataConversion returns dataRepresentation::DataConversion:
		//	LinearDataConversion | LinearDataConversionWithInterval;
		@Override public ParserRule getRule() { return rule; }

		//LinearDataConversion | LinearDataConversionWithInterval
		public Alternatives getAlternatives() { return cAlternatives; }

		//LinearDataConversion
		public RuleCall getLinearDataConversionParserRuleCall_0() { return cLinearDataConversionParserRuleCall_0; }

		//LinearDataConversionWithInterval
		public RuleCall getLinearDataConversionWithIntervalParserRuleCall_1() { return cLinearDataConversionWithIntervalParserRuleCall_1; }
	}

	public class LinearDataConversionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinearDataConversion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWithScalingFactorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScalingFactorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScalingFactorDOUBLEParserRuleCall_2_0 = (RuleCall)cScalingFactorAssignment_2.eContents().get(0);
		private final Keyword cAndOffsetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOffsetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOffsetDOUBLEParserRuleCall_5_0 = (RuleCall)cOffsetAssignment_5.eContents().get(0);
		
		//LinearDataConversion returns dataRepresentation::LinearDataConversion:
		//	"with scaling factor" ":" scalingFactor=DOUBLE "and offset" ":" offset=DOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//"with scaling factor" ":" scalingFactor=DOUBLE "and offset" ":" offset=DOUBLE
		public Group getGroup() { return cGroup; }

		//"with scaling factor"
		public Keyword getWithScalingFactorKeyword_0() { return cWithScalingFactorKeyword_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//scalingFactor=DOUBLE
		public Assignment getScalingFactorAssignment_2() { return cScalingFactorAssignment_2; }

		//DOUBLE
		public RuleCall getScalingFactorDOUBLEParserRuleCall_2_0() { return cScalingFactorDOUBLEParserRuleCall_2_0; }

		//"and offset"
		public Keyword getAndOffsetKeyword_3() { return cAndOffsetKeyword_3; }

		//":"
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//offset=DOUBLE
		public Assignment getOffsetAssignment_5() { return cOffsetAssignment_5; }

		//DOUBLE
		public RuleCall getOffsetDOUBLEParserRuleCall_5_0() { return cOffsetDOUBLEParserRuleCall_5_0; }
	}

	public class LinearDataConversionWithIntervalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinearDataConversionWithInterval");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cByLinearMappingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFromIntervalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFromIntervalIntervalParserRuleCall_1_0 = (RuleCall)cFromIntervalAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cToIntervalAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cToIntervalIntervalParserRuleCall_3_0 = (RuleCall)cToIntervalAssignment_3.eContents().get(0);
		private final Keyword cAsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDataTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDataTypeDataTypeEnumRuleCall_5_0 = (RuleCall)cDataTypeAssignment_5.eContents().get(0);
		
		//LinearDataConversionWithInterval returns dataRepresentation::LinearDataConversionWithInterval:
		//	"by linear mapping" fromInterval=Interval "=>" toInterval=Interval "as" dataType=DataType;
		@Override public ParserRule getRule() { return rule; }

		//"by linear mapping" fromInterval=Interval "=>" toInterval=Interval "as" dataType=DataType
		public Group getGroup() { return cGroup; }

		//"by linear mapping"
		public Keyword getByLinearMappingKeyword_0() { return cByLinearMappingKeyword_0; }

		//fromInterval=Interval
		public Assignment getFromIntervalAssignment_1() { return cFromIntervalAssignment_1; }

		//Interval
		public RuleCall getFromIntervalIntervalParserRuleCall_1_0() { return cFromIntervalIntervalParserRuleCall_1_0; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_2() { return cEqualsSignGreaterThanSignKeyword_2; }

		//toInterval=Interval
		public Assignment getToIntervalAssignment_3() { return cToIntervalAssignment_3; }

		//Interval
		public RuleCall getToIntervalIntervalParserRuleCall_3_0() { return cToIntervalIntervalParserRuleCall_3_0; }

		//"as"
		public Keyword getAsKeyword_4() { return cAsKeyword_4; }

		//dataType=DataType
		public Assignment getDataTypeAssignment_5() { return cDataTypeAssignment_5; }

		//DataType
		public RuleCall getDataTypeDataTypeEnumRuleCall_5_0() { return cDataTypeDataTypeEnumRuleCall_5_0; }
	}

	public class DOUBLEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOUBLE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//DOUBLE returns ecore::EDouble:
		//	INT ("." INT)?;
		@Override public ParserRule getRule() { return rule; }

		//INT ("." INT)?
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//("." INT)?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1_1() { return cINTTerminalRuleCall_1_1; }
	}

	public class UNITElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UNIT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		////BOOLEAN returns ecore::EBoolean: 'true' | 'false';
		////UNIT returns dataRepresentation::Unit: STRING;
		////terminal UNIT returns dataRepresentation::Unit : '^'?('a'..'z'|'A'..'Z'/ **'_'* /) ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
		//UNIT returns dataRepresentation::Unit:
		//	ID* (ANY_OTHER ID*)*;
		@Override public ParserRule getRule() { return rule; }

		//ID* (ANY_OTHER ID*)*
		public Group getGroup() { return cGroup; }

		//ID*
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(ANY_OTHER ID*)*
		public Group getGroup_1() { return cGroup_1; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_1_0() { return cANY_OTHERTerminalRuleCall_1_0; }

		//ID*
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class CodingElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Coding");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSENSIDL_BINARYEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSENSIDL_BINARYSENSIDL_BINARYKeyword_0_0 = (Keyword)cSENSIDL_BINARYEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSENSIDL_JSONEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSENSIDL_JSONSENSIDL_JSONKeyword_1_0 = (Keyword)cSENSIDL_JSONEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Coding returns sensidl::Coding:
		//	SENSIDL_BINARY | SENSIDL_JSON;
		public EnumRule getRule() { return rule; }

		//SENSIDL_BINARY | SENSIDL_JSON
		public Alternatives getAlternatives() { return cAlternatives; }

		//SENSIDL_BINARY
		public EnumLiteralDeclaration getSENSIDL_BINARYEnumLiteralDeclaration_0() { return cSENSIDL_BINARYEnumLiteralDeclaration_0; }

		//"SENSIDL_BINARY"
		public Keyword getSENSIDL_BINARYSENSIDL_BINARYKeyword_0_0() { return cSENSIDL_BINARYSENSIDL_BINARYKeyword_0_0; }

		//SENSIDL_JSON
		public EnumLiteralDeclaration getSENSIDL_JSONEnumLiteralDeclaration_1() { return cSENSIDL_JSONEnumLiteralDeclaration_1; }

		//"SENSIDL_JSON"
		public Keyword getSENSIDL_JSONSENSIDL_JSONKeyword_1_0() { return cSENSIDL_JSONSENSIDL_JSONKeyword_1_0; }
	}

	public class EndiannessElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Endianness");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBIG_ENDIANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBIG_ENDIANBIG_ENDIANKeyword_0_0 = (Keyword)cBIG_ENDIANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLITTLE_ENDIANEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLITTLE_ENDIANLITTLE_ENDIANKeyword_1_0 = (Keyword)cLITTLE_ENDIANEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Endianness returns sensidl::Endianness:
		//	BIG_ENDIAN | LITTLE_ENDIAN;
		public EnumRule getRule() { return rule; }

		//BIG_ENDIAN | LITTLE_ENDIAN
		public Alternatives getAlternatives() { return cAlternatives; }

		//BIG_ENDIAN
		public EnumLiteralDeclaration getBIG_ENDIANEnumLiteralDeclaration_0() { return cBIG_ENDIANEnumLiteralDeclaration_0; }

		//"BIG_ENDIAN"
		public Keyword getBIG_ENDIANBIG_ENDIANKeyword_0_0() { return cBIG_ENDIANBIG_ENDIANKeyword_0_0; }

		//LITTLE_ENDIAN
		public EnumLiteralDeclaration getLITTLE_ENDIANEnumLiteralDeclaration_1() { return cLITTLE_ENDIANEnumLiteralDeclaration_1; }

		//"LITTLE_ENDIAN"
		public Keyword getLITTLE_ENDIANLITTLE_ENDIANKeyword_1_0() { return cLITTLE_ENDIANLITTLE_ENDIANKeyword_1_0; }
	}

	public class DataTypeNotAdjustableElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataTypeNotAdjustable");
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSTRINGSTRINGKeyword_0 = (Keyword)cSTRINGEnumLiteralDeclaration.eContents().get(0);
		
		//enum DataTypeNotAdjustable returns dataRepresentation::DataType:
		//	STRING;
		public EnumRule getRule() { return rule; }

		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration() { return cSTRINGEnumLiteralDeclaration; }

		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_0() { return cSTRINGSTRINGKeyword_0; }
	}

	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINT8EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINT8INT8Keyword_0_0 = (Keyword)cINT8EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUINT8EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUINT8UINT8Keyword_1_0 = (Keyword)cUINT8EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINT16EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINT16INT16Keyword_2_0 = (Keyword)cINT16EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUINT16EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUINT16UINT16Keyword_3_0 = (Keyword)cUINT16EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cINT32EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cINT32INT32Keyword_4_0 = (Keyword)cINT32EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cUINT32EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cUINT32UINT32Keyword_5_0 = (Keyword)cUINT32EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cINT64EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cINT64INT64Keyword_6_0 = (Keyword)cINT64EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cUINT64EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cUINT64UINT64Keyword_7_0 = (Keyword)cUINT64EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cFLOATFLOATKeyword_8_0 = (Keyword)cFLOATEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cDOUBLEEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cDOUBLEDOUBLEKeyword_9_0 = (Keyword)cDOUBLEEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cBOOLEANBOOLEANKeyword_10_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_10.eContents().get(0);
		
		//enum DataType returns dataRepresentation::DataType:
		//	INT8 | UINT8 | INT16 | UINT16 | INT32 | UINT32 | INT64 | UINT64 | FLOAT | DOUBLE | BOOLEAN;
		public EnumRule getRule() { return rule; }

		//INT8 | UINT8 | INT16 | UINT16 | INT32 | UINT32 | INT64 | UINT64 | FLOAT | DOUBLE | BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT8
		public EnumLiteralDeclaration getINT8EnumLiteralDeclaration_0() { return cINT8EnumLiteralDeclaration_0; }

		//"INT8"
		public Keyword getINT8INT8Keyword_0_0() { return cINT8INT8Keyword_0_0; }

		//UINT8
		public EnumLiteralDeclaration getUINT8EnumLiteralDeclaration_1() { return cUINT8EnumLiteralDeclaration_1; }

		//"UINT8"
		public Keyword getUINT8UINT8Keyword_1_0() { return cUINT8UINT8Keyword_1_0; }

		//INT16
		public EnumLiteralDeclaration getINT16EnumLiteralDeclaration_2() { return cINT16EnumLiteralDeclaration_2; }

		//"INT16"
		public Keyword getINT16INT16Keyword_2_0() { return cINT16INT16Keyword_2_0; }

		//UINT16
		public EnumLiteralDeclaration getUINT16EnumLiteralDeclaration_3() { return cUINT16EnumLiteralDeclaration_3; }

		//"UINT16"
		public Keyword getUINT16UINT16Keyword_3_0() { return cUINT16UINT16Keyword_3_0; }

		//INT32
		public EnumLiteralDeclaration getINT32EnumLiteralDeclaration_4() { return cINT32EnumLiteralDeclaration_4; }

		//"INT32"
		public Keyword getINT32INT32Keyword_4_0() { return cINT32INT32Keyword_4_0; }

		//UINT32
		public EnumLiteralDeclaration getUINT32EnumLiteralDeclaration_5() { return cUINT32EnumLiteralDeclaration_5; }

		//"UINT32"
		public Keyword getUINT32UINT32Keyword_5_0() { return cUINT32UINT32Keyword_5_0; }

		//INT64
		public EnumLiteralDeclaration getINT64EnumLiteralDeclaration_6() { return cINT64EnumLiteralDeclaration_6; }

		//"INT64"
		public Keyword getINT64INT64Keyword_6_0() { return cINT64INT64Keyword_6_0; }

		//UINT64
		public EnumLiteralDeclaration getUINT64EnumLiteralDeclaration_7() { return cUINT64EnumLiteralDeclaration_7; }

		//"UINT64"
		public Keyword getUINT64UINT64Keyword_7_0() { return cUINT64UINT64Keyword_7_0; }

		//FLOAT
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_8() { return cFLOATEnumLiteralDeclaration_8; }

		//"FLOAT"
		public Keyword getFLOATFLOATKeyword_8_0() { return cFLOATFLOATKeyword_8_0; }

		//DOUBLE
		public EnumLiteralDeclaration getDOUBLEEnumLiteralDeclaration_9() { return cDOUBLEEnumLiteralDeclaration_9; }

		//"DOUBLE"
		public Keyword getDOUBLEDOUBLEKeyword_9_0() { return cDOUBLEDOUBLEKeyword_9_0; }

		//BOOLEAN
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_10() { return cBOOLEANEnumLiteralDeclaration_10; }

		//"BOOLEAN"
		public Keyword getBOOLEANBOOLEANKeyword_10_0() { return cBOOLEANBOOLEANKeyword_10_0; }
	}
	
	private final SensorInterfaceElements pSensorInterface;
	private final EncodingSettingsElements pEncodingSettings;
	private final CodingElements unknownRuleCoding;
	private final EndiannessElements unknownRuleEndianness;
	private final SensorDataDescriptionElements pSensorDataDescription;
	private final DataSetElements pDataSet;
	private final DataElements pData;
	private final MeasurementDataElements pMeasurementData;
	private final NonMeasurementDataElements pNonMeasurementData;
	private final MeasurementDataNotAdjustableElements pMeasurementDataNotAdjustable;
	private final DataTypeNotAdjustableElements unknownRuleDataTypeNotAdjustable;
	private final DataTypeElements unknownRuleDataType;
	private final DataAdjustmentElements pDataAdjustment;
	private final DataRangeElements pDataRange;
	private final IntervalElements pInterval;
	private final DataConversionElements pDataConversion;
	private final LinearDataConversionElements pLinearDataConversion;
	private final LinearDataConversionWithIntervalElements pLinearDataConversionWithInterval;
	private final DOUBLEElements pDOUBLE;
	private final UNITElements pUNIT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tDESCRIPTION;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SensidlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSensorInterface = new SensorInterfaceElements();
		this.pEncodingSettings = new EncodingSettingsElements();
		this.unknownRuleCoding = new CodingElements();
		this.unknownRuleEndianness = new EndiannessElements();
		this.pSensorDataDescription = new SensorDataDescriptionElements();
		this.pDataSet = new DataSetElements();
		this.pData = new DataElements();
		this.pMeasurementData = new MeasurementDataElements();
		this.pNonMeasurementData = new NonMeasurementDataElements();
		this.pMeasurementDataNotAdjustable = new MeasurementDataNotAdjustableElements();
		this.unknownRuleDataTypeNotAdjustable = new DataTypeNotAdjustableElements();
		this.unknownRuleDataType = new DataTypeElements();
		this.pDataAdjustment = new DataAdjustmentElements();
		this.pDataRange = new DataRangeElements();
		this.pInterval = new IntervalElements();
		this.pDataConversion = new DataConversionElements();
		this.pLinearDataConversion = new LinearDataConversionElements();
		this.pLinearDataConversionWithInterval = new LinearDataConversionWithIntervalElements();
		this.pDOUBLE = new DOUBLEElements();
		this.pUNIT = new UNITElements();
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT");
		this.tDESCRIPTION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DESCRIPTION");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fzi.sensidl.language.Sensidl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SensorInterface returns sensidl::SensorInterface:
	//	"sensorInterface" name=ID description=DESCRIPTION? ("with identifier" ":" ID=STRING)? "{"
	//	encodingSettings=EncodingSettings dataDescription=SensorDataDescription "}";
	public SensorInterfaceElements getSensorInterfaceAccess() {
		return pSensorInterface;
	}
	
	public ParserRule getSensorInterfaceRule() {
		return getSensorInterfaceAccess().getRule();
	}

	//EncodingSettings returns sensidl::EncodingSettings:
	//	"encoding" ":" coding=Coding "," "endianness" ":" endianness=Endianness "," "alignment" ":" alignment=INT "BIT"
	//	("with identifier" ":" ID=STRING)?;
	public EncodingSettingsElements getEncodingSettingsAccess() {
		return pEncodingSettings;
	}
	
	public ParserRule getEncodingSettingsRule() {
		return getEncodingSettingsAccess().getRule();
	}

	//enum Coding returns sensidl::Coding:
	//	SENSIDL_BINARY | SENSIDL_JSON;
	public CodingElements getCodingAccess() {
		return unknownRuleCoding;
	}
	
	public EnumRule getCodingRule() {
		return getCodingAccess().getRule();
	}

	//enum Endianness returns sensidl::Endianness:
	//	BIG_ENDIAN | LITTLE_ENDIAN;
	public EndiannessElements getEndiannessAccess() {
		return unknownRuleEndianness;
	}
	
	public EnumRule getEndiannessRule() {
		return getEndiannessAccess().getRule();
	}

	//SensorDataDescription returns dataRepresentation::SensorDataDescription:
	//	"sensorData" {dataRepresentation::SensorDataDescription} ("with identifier" ":" ID=STRING)? "{" dataSets+=DataSet*
	//	"}";
	public SensorDataDescriptionElements getSensorDataDescriptionAccess() {
		return pSensorDataDescription;
	}
	
	public ParserRule getSensorDataDescriptionRule() {
		return getSensorDataDescriptionAccess().getRule();
	}

	//DataSet returns dataRepresentation::DataSet:
	//	"dataSet" name=ID ("uses" parentDataSet=[dataRepresentation::DataSet])? ("with identifier" ":" ID=STRING)?
	//	description=DESCRIPTION? "{" data+=Data* "}";
	public DataSetElements getDataSetAccess() {
		return pDataSet;
	}
	
	public ParserRule getDataSetRule() {
		return getDataSetAccess().getRule();
	}

	//Data returns dataRepresentation::Data:
	//	MeasurementData | NonMeasurementData | MeasurementDataNotAdjustable;
	public DataElements getDataAccess() {
		return pData;
	}
	
	public ParserRule getDataRule() {
		return getDataAccess().getRule();
	}

	//MeasurementData returns dataRepresentation::MeasurementData:
	//	name=ID "as" dataType=DataType "in" unit=UNIT ("with identifier" ":" ID=STRING)? ("adjusted"
	//	adjustments+=DataAdjustment ("," adjustments+=DataAdjustment)*)? description=DESCRIPTION?;
	public MeasurementDataElements getMeasurementDataAccess() {
		return pMeasurementData;
	}
	
	public ParserRule getMeasurementDataRule() {
		return getMeasurementDataAccess().getRule();
	}

	//NonMeasurementData returns dataRepresentation::NonMeasurementData:
	//	name=ID "as" (dataType=DataType | dataType=DataTypeNotAdjustable) constant?="constant"? ("value" "=" value=STRING)?
	//	("with identifier" ":" ID=STRING)? description=DESCRIPTION?;
	public NonMeasurementDataElements getNonMeasurementDataAccess() {
		return pNonMeasurementData;
	}
	
	public ParserRule getNonMeasurementDataRule() {
		return getNonMeasurementDataAccess().getRule();
	}

	//MeasurementDataNotAdjustable returns dataRepresentation::MeasurementData:
	//	name=ID "as" dataType=DataTypeNotAdjustable "in" unit=UNIT ("with identifier" ":" ID=STRING)?
	//	description=DESCRIPTION?;
	public MeasurementDataNotAdjustableElements getMeasurementDataNotAdjustableAccess() {
		return pMeasurementDataNotAdjustable;
	}
	
	public ParserRule getMeasurementDataNotAdjustableRule() {
		return getMeasurementDataNotAdjustableAccess().getRule();
	}

	//enum DataTypeNotAdjustable returns dataRepresentation::DataType:
	//	STRING;
	public DataTypeNotAdjustableElements getDataTypeNotAdjustableAccess() {
		return unknownRuleDataTypeNotAdjustable;
	}
	
	public EnumRule getDataTypeNotAdjustableRule() {
		return getDataTypeNotAdjustableAccess().getRule();
	}

	//enum DataType returns dataRepresentation::DataType:
	//	INT8 | UINT8 | INT16 | UINT16 | INT32 | UINT32 | INT64 | UINT64 | FLOAT | DOUBLE | BOOLEAN;
	public DataTypeElements getDataTypeAccess() {
		return unknownRuleDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//DataAdjustment returns dataRepresentation::DataAdjustment:
	//	DataRange | DataConversion;
	public DataAdjustmentElements getDataAdjustmentAccess() {
		return pDataAdjustment;
	}
	
	public ParserRule getDataAdjustmentRule() {
		return getDataAdjustmentAccess().getRule();
	}

	//DataRange returns dataRepresentation::DataRange:
	//	"with range" range=Interval;
	public DataRangeElements getDataRangeAccess() {
		return pDataRange;
	}
	
	public ParserRule getDataRangeRule() {
		return getDataRangeAccess().getRule();
	}

	//Interval returns dataRepresentation::Interval:
	//	"[" lowerBound=DOUBLE ";" upperBound=DOUBLE "]";
	public IntervalElements getIntervalAccess() {
		return pInterval;
	}
	
	public ParserRule getIntervalRule() {
		return getIntervalAccess().getRule();
	}

	//DataConversion returns dataRepresentation::DataConversion:
	//	LinearDataConversion | LinearDataConversionWithInterval;
	public DataConversionElements getDataConversionAccess() {
		return pDataConversion;
	}
	
	public ParserRule getDataConversionRule() {
		return getDataConversionAccess().getRule();
	}

	//LinearDataConversion returns dataRepresentation::LinearDataConversion:
	//	"with scaling factor" ":" scalingFactor=DOUBLE "and offset" ":" offset=DOUBLE;
	public LinearDataConversionElements getLinearDataConversionAccess() {
		return pLinearDataConversion;
	}
	
	public ParserRule getLinearDataConversionRule() {
		return getLinearDataConversionAccess().getRule();
	}

	//LinearDataConversionWithInterval returns dataRepresentation::LinearDataConversionWithInterval:
	//	"by linear mapping" fromInterval=Interval "=>" toInterval=Interval "as" dataType=DataType;
	public LinearDataConversionWithIntervalElements getLinearDataConversionWithIntervalAccess() {
		return pLinearDataConversionWithInterval;
	}
	
	public ParserRule getLinearDataConversionWithIntervalRule() {
		return getLinearDataConversionWithIntervalAccess().getRule();
	}

	//DOUBLE returns ecore::EDouble:
	//	INT ("." INT)?;
	public DOUBLEElements getDOUBLEAccess() {
		return pDOUBLE;
	}
	
	public ParserRule getDOUBLERule() {
		return getDOUBLEAccess().getRule();
	}

	////BOOLEAN returns ecore::EBoolean: 'true' | 'false';
	////UNIT returns dataRepresentation::Unit: STRING;
	////terminal UNIT returns dataRepresentation::Unit : '^'?('a'..'z'|'A'..'Z'/ **'_'* /) ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//UNIT returns dataRepresentation::Unit:
	//	ID* (ANY_OTHER ID*)*;
	public UNITElements getUNITAccess() {
		return pUNIT;
	}
	
	public ParserRule getUNITRule() {
		return getUNITAccess().getRule();
	}

	//// multi-line comments can't start with '/ **'
	//terminal ML_COMMENT:
	//	"/ *" !"*"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal DESCRIPTION:
	//	"/ **"->"* /";
	public TerminalRule getDESCRIPTIONRule() {
		return tDESCRIPTION;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
