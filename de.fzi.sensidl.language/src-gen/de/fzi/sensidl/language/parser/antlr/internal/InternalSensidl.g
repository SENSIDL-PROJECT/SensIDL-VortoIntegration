/*
* generated by Xtext
*/
grammar InternalSensidl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.fzi.sensidl.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fzi.sensidl.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fzi.sensidl.language.services.SensidlGrammarAccess;

}

@parser::members {

 	private SensidlGrammarAccess grammarAccess;
 	
    public InternalSensidlParser(TokenStream input, SensidlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DataModel";	
   	}
   	
   	@Override
   	protected SensidlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDataModel
entryRuleDataModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataModelRule()); }
	 iv_ruleDataModel=ruleDataModel 
	 { $current=$iv_ruleDataModel.current; } 
	 EOF 
;

// Rule DataModel
ruleDataModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='options' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataModelAccess().getOptionsKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataModelAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataModelAccess().getOptionsOptionsParserRuleCall_2_0()); 
	    }
		lv_options_2_0=ruleOptions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataModelRule());
	        }
       		set(
       			$current, 
       			"options",
        		lv_options_2_0, 
        		"Options");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataModelAccess().getRightCurlyBracketKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataModelAccess().getRepresentationsRepresentationParserRuleCall_4_0_0()); 
	    }
		lv_representations_4_0=ruleRepresentation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataModelRule());
	        }
       		add(
       			$current, 
       			"representations",
        		lv_representations_4_0, 
        		"Representation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDataModelAccess().getInterpretationsInterpretationParserRuleCall_4_1_0()); 
	    }
		lv_interpretations_5_0=ruleInterpretation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataModelRule());
	        }
       		add(
       			$current, 
       			"interpretations",
        		lv_interpretations_5_0, 
        		"Interpretation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6='transmit' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataModelAccess().getTransmitKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataModelRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getDataModelAccess().getTransmitInterpretationCrossReference_6_0()); 
	}

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDataModelAccess().getCommaKeyword_7_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataModelRule());
	        }
        }
	otherlv_9=RULE_ID
	{
		newLeafNode(otherlv_9, grammarAccess.getDataModelAccess().getTransmitInterpretationCrossReference_7_1_0()); 
	}

)
))*)
;





// Entry rule entryRuleOptions
entryRuleOptions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionsRule()); }
	 iv_ruleOptions=ruleOptions 
	 { $current=$iv_ruleOptions.current; } 
	 EOF 
;

// Rule Options
ruleOptions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getOptionsAccess().getOptionsAction_0(),
            $current);
    }
)((	otherlv_1='transmission' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionsAccess().getTransmissionKeyword_1_0_0());
    }
	otherlv_2='type' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionsAccess().getTypeKeyword_1_0_1());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOptionsAccess().getColonKeyword_1_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionsAccess().getTransmissionTypeTransmissionTypeEnumRuleCall_1_0_3_0()); 
	    }
		lv_transmissionType_4_0=ruleTransmissionType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionsRule());
	        }
       		set(
       			$current, 
       			"transmissionType",
        		lv_transmissionType_4_0, 
        		"TransmissionType");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_5='sensor' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOptionsAccess().getSensorKeyword_1_1_0());
    }
	otherlv_6='language' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getOptionsAccess().getLanguageKeyword_1_1_1());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getOptionsAccess().getColonKeyword_1_1_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionsAccess().getSensorLanguageGenerationLanguageEnumRuleCall_1_1_3_0()); 
	    }
		lv_sensorLanguage_8_0=ruleGenerationLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionsRule());
	        }
       		set(
       			$current, 
       			"sensorLanguage",
        		lv_sensorLanguage_8_0, 
        		"GenerationLanguage");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_9='receiver' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getOptionsAccess().getReceiverKeyword_1_2_0());
    }
	otherlv_10='language' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getOptionsAccess().getLanguageKeyword_1_2_1());
    }
	otherlv_11=':' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getOptionsAccess().getColonKeyword_1_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOptionsAccess().getReceiverLanguageGenerationLanguageEnumRuleCall_1_2_3_0()); 
	    }
		lv_receiverLanguage_12_0=ruleGenerationLanguage		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionsRule());
	        }
       		set(
       			$current, 
       			"receiverLanguage",
        		lv_receiverLanguage_12_0, 
        		"GenerationLanguage");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleRepresentation
entryRuleRepresentation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRepresentationRule()); }
	 iv_ruleRepresentation=ruleRepresentation 
	 { $current=$iv_ruleRepresentation.current; } 
	 EOF 
;

// Rule Representation
ruleRepresentation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='repr' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRepresentationAccess().getReprKeyword_0_0());
    }

    |	otherlv_1='representation' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRepresentationAccess().getRepresentationKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getRepresentationAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRepresentationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='is' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRepresentationAccess().getIsKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRepresentationAccess().getTypeTypeEnumRuleCall_3_0()); 
	    }
		lv_type_4_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRepresentationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_4_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='by' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRepresentationAccess().getByKeyword_4());
    }
(
(
		lv_byteCount_6_0=RULE_INT
		{
			newLeafNode(lv_byteCount_6_0, grammarAccess.getRepresentationAccess().getByteCountINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRepresentationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"byteCount",
        		lv_byteCount_6_0, 
        		"INT");
	    }

)
)(	otherlv_7='bytes' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getRepresentationAccess().getBytesKeyword_6_0());
    }

    |	otherlv_8='byte' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRepresentationAccess().getByteKeyword_6_1());
    }
))
;





// Entry rule entryRuleInterpretation
entryRuleInterpretation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterpretationRule()); }
	 iv_ruleInterpretation=ruleInterpretation 
	 { $current=$iv_ruleInterpretation.current; } 
	 EOF 
;

// Rule Interpretation
ruleInterpretation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInterpretationAccess().getConstantParserRuleCall_0()); 
    }
    this_Constant_0=ruleConstant
    { 
        $current = $this_Constant_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterpretationAccess().getPrimitiveInterpretationParserRuleCall_1()); 
    }
    this_PrimitiveInterpretation_1=rulePrimitiveInterpretation
    { 
        $current = $this_PrimitiveInterpretation_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterpretationAccess().getMeasurementParserRuleCall_2()); 
    }
    this_Measurement_2=ruleMeasurement
    { 
        $current = $this_Measurement_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterpretationAccess().getInterpretationGroupParserRuleCall_3()); 
    }
    this_InterpretationGroup_3=ruleInterpretationGroup
    { 
        $current = $this_InterpretationGroup_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInterpretationAccess().getCalculatedParserRuleCall_4()); 
    }
    this_Calculated_4=ruleCalculated
    { 
        $current = $this_Calculated_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleCalculated
entryRuleCalculated returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCalculatedRule()); }
	 iv_ruleCalculated=ruleCalculated 
	 { $current=$iv_ruleCalculated.current; } 
	 EOF 
;

// Rule Calculated
ruleCalculated returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='calculate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCalculatedAccess().getCalculateKeyword_0_0());
    }

    |	otherlv_1='calculated' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCalculatedAccess().getCalculatedKeyword_0_1());
    }
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getCalculatedAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCalculatedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='as' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCalculatedAccess().getAsKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCalculatedRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getCalculatedAccess().getRepresentationRepresentationCrossReference_3_0()); 
	}

)
)	otherlv_5='by' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCalculatedAccess().getByKeyword_4());
    }
(
(
		lv_methodName_6_0=RULE_ID
		{
			newLeafNode(lv_methodName_6_0, grammarAccess.getCalculatedAccess().getMethodNameIDTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCalculatedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"methodName",
        		lv_methodName_6_0, 
        		"ID");
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCalculatedAccess().getCommaKeyword_6_0());
    }
(
(
		lv_methodNameOut_8_0=RULE_ID
		{
			newLeafNode(lv_methodNameOut_8_0, grammarAccess.getCalculatedAccess().getMethodNameOutIDTerminalRuleCall_6_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCalculatedRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"methodNameOut",
        		lv_methodNameOut_8_0, 
        		"ID");
	    }

)
))?	otherlv_9='with' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCalculatedAccess().getWithKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCalculatedAccess().getParameterParameterParserRuleCall_8_0()); 
	    }
		lv_parameter_10_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCalculatedRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_10_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCalculatedAccess().getCommaKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCalculatedAccess().getParameterParameterParserRuleCall_9_1_0()); 
	    }
		lv_parameter_12_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCalculatedRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_12_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getParameterAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getInterpretationInterpretationCrossReference_1_0()); 
	}

)
)(	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getAsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getArgumentTypeArgumentTypeEnumRuleCall_2_1_0()); 
	    }
		lv_argumentType_3_0=ruleArgumentType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"argumentType",
        		lv_argumentType_3_0, 
        		"ArgumentType");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleInterpretationGroup
entryRuleInterpretationGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterpretationGroupRule()); }
	 iv_ruleInterpretationGroup=ruleInterpretationGroup 
	 { $current=$iv_ruleInterpretationGroup.current; } 
	 EOF 
;

// Rule InterpretationGroup
ruleInterpretationGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='group' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInterpretationGroupAccess().getGroupKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getInterpretationGroupAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInterpretationGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterpretationGroupAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterpretationGroupAccess().getInterpretationsInterpretationParserRuleCall_3_0()); 
	    }
		lv_interpretations_3_0=ruleInterpretation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterpretationGroupRule());
	        }
       		add(
       			$current, 
       			"interpretations",
        		lv_interpretations_3_0, 
        		"Interpretation");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterpretationGroupAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMeasurement
entryRuleMeasurement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasurementRule()); }
	 iv_ruleMeasurement=ruleMeasurement 
	 { $current=$iv_ruleMeasurement.current; } 
	 EOF 
;

// Rule Measurement
ruleMeasurement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='measurement' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMeasurementAccess().getMeasurementKeyword_0());
    }
	otherlv_1='of' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMeasurementAccess().getOfKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementAccess().getQuantityQuantityEnumRuleCall_2_0()); 
	    }
		lv_quantity_2_0=ruleQuantity		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementRule());
	        }
       		set(
       			$current, 
       			"quantity",
        		lv_quantity_2_0, 
        		"Quantity");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getMeasurementAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)	otherlv_4='in' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMeasurementAccess().getInKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementAccess().getScaleDOUBLEParserRuleCall_5_0()); 
	    }
		lv_scale_5_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementRule());
	        }
       		set(
       			$current, 
       			"scale",
        		lv_scale_5_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_unit_6_0=RULE_STRING
		{
			newLeafNode(lv_unit_6_0, grammarAccess.getMeasurementAccess().getUnitSTRINGTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unit",
        		lv_unit_6_0, 
        		"STRING");
	    }

)
)	otherlv_7='as' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMeasurementAccess().getAsKeyword_7());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getMeasurementAccess().getRepresentationRepresentationCrossReference_8_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementAccess().getConstraintsMeasurementConstraintParserRuleCall_9_0()); 
	    }
		lv_constraints_9_0=ruleMeasurementConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_9_0, 
        		"MeasurementConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleMeasurementConstraint
entryRuleMeasurementConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasurementConstraintRule()); }
	 iv_ruleMeasurementConstraint=ruleMeasurementConstraint 
	 { $current=$iv_ruleMeasurementConstraint.current; } 
	 EOF 
;

// Rule MeasurementConstraint
ruleMeasurementConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getMeasurementConstraintAccess().getMeasurementInRangeParserRuleCall()); 
    }
    this_MeasurementInRange_0=ruleMeasurementInRange
    { 
        $current = $this_MeasurementInRange_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleMeasurementInRange
entryRuleMeasurementInRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasurementInRangeRule()); }
	 iv_ruleMeasurementInRange=ruleMeasurementInRange 
	 { $current=$iv_ruleMeasurementInRange.current; } 
	 EOF 
;

// Rule MeasurementInRange
ruleMeasurementInRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='from' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMeasurementInRangeAccess().getFromKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementInRangeAccess().getLowerBoundMeasureParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleMeasure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementInRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"Measure");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMeasurementInRangeAccess().getToKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementInRangeAccess().getUpperBoundMeasureParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleMeasure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementInRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"Measure");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMeasure
entryRuleMeasure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasureRule()); }
	 iv_ruleMeasure=ruleMeasure 
	 { $current=$iv_ruleMeasure.current; } 
	 EOF 
;

// Rule Measure
ruleMeasure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMeasureAccess().getValueDOUBLEParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasureRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_unit_1_0=RULE_STRING
		{
			newLeafNode(lv_unit_1_0, grammarAccess.getMeasureAccess().getUnitSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unit",
        		lv_unit_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulePrimitiveInterpretation
entryRulePrimitiveInterpretation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimitiveInterpretationRule()); }
	 iv_rulePrimitiveInterpretation=rulePrimitiveInterpretation 
	 { $current=$iv_rulePrimitiveInterpretation.current; } 
	 EOF 
;

// Rule PrimitiveInterpretation
rulePrimitiveInterpretation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='primitive' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimitiveInterpretationAccess().getPrimitiveKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimitiveInterpretationAccess().getTypeTypeEnumRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimitiveInterpretationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getPrimitiveInterpretationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimitiveInterpretationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='as' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimitiveInterpretationAccess().getAsKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimitiveInterpretationRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getPrimitiveInterpretationAccess().getRepresentationRepresentationCrossReference_4_0()); 
	}

)
))
;





// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	 iv_ruleConstant=ruleConstant 
	 { $current=$iv_ruleConstant.current; } 
	 EOF 
;

// Rule Constant
ruleConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='constant' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getConstantAccess().getConstantKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getConstantAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstantAccess().getAsKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getConstantAccess().getRepresentationRepresentationCrossReference_3_0()); 
	}

)
)	otherlv_4='is' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstantAccess().getIsKeyword_4());
    }
(
(
		lv_constantValue_5_0=RULE_STRING
		{
			newLeafNode(lv_constantValue_5_0, grammarAccess.getConstantAccess().getConstantValueSTRINGTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"constantValue",
        		lv_constantValue_5_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Rule GenerationLanguage
ruleGenerationLanguage returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='JAVA' 
	{
        $current = grammarAccess.getGenerationLanguageAccess().getJAVAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getGenerationLanguageAccess().getJAVAEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='CPP' 
	{
        $current = grammarAccess.getGenerationLanguageAccess().getCPPEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getGenerationLanguageAccess().getCPPEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='C' 
	{
        $current = grammarAccess.getGenerationLanguageAccess().getCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getGenerationLanguageAccess().getCEnumLiteralDeclaration_2()); 
    }
));



// Rule TransmissionType
ruleTransmissionType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='PUSH' 
	{
        $current = grammarAccess.getTransmissionTypeAccess().getPUSHEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTransmissionTypeAccess().getPUSHEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='PULL' 
	{
        $current = grammarAccess.getTransmissionTypeAccess().getPULLEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTransmissionTypeAccess().getPULLEnumLiteralDeclaration_1()); 
    }
));



// Rule ArgumentType
ruleArgumentType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(	enumLiteral_0='BYTE_ARRAY' 
	{
        $current = grammarAccess.getArgumentTypeAccess().getBYTE_ARRAYEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getArgumentTypeAccess().getBYTE_ARRAYEnumLiteralDeclaration()); 
    }
);



// Rule Quantity
ruleQuantity returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='FLOW' 
	{
        $current = grammarAccess.getQuantityAccess().getFLOWEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getQuantityAccess().getFLOWEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='TEMPERATURE' 
	{
        $current = grammarAccess.getQuantityAccess().getTEMPERATUREEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getQuantityAccess().getTEMPERATUREEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='VOLUME' 
	{
        $current = grammarAccess.getQuantityAccess().getVOLUMEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getQuantityAccess().getVOLUMEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='DURATION' 
	{
        $current = grammarAccess.getQuantityAccess().getDURATIONEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getQuantityAccess().getDURATIONEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='PRESSURE' 
	{
        $current = grammarAccess.getQuantityAccess().getPRESSUREEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getQuantityAccess().getPRESSUREEnumLiteralDeclaration_4()); 
    }
));



// Rule Type
ruleType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='BYTE' 
	{
        $current = grammarAccess.getTypeAccess().getBYTEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getBYTEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='SHORT' 
	{
        $current = grammarAccess.getTypeAccess().getSHORTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getSHORTEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='INT' 
	{
        $current = grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='LONG' 
	{
        $current = grammarAccess.getTypeAccess().getLONGEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getTypeAccess().getLONGEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='FLOAT' 
	{
        $current = grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getTypeAccess().getFLOATEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='DOUBLE' 
	{
        $current = grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getTypeAccess().getDOUBLEEnumLiteralDeclaration_5()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


