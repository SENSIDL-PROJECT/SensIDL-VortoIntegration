/*
* generated by Xtext
*/
grammar InternalSensidl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.fzi.sensidl.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fzi.sensidl.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fzi.sensidl.language.services.SensidlGrammarAccess;

}

@parser::members {

 	private SensidlGrammarAccess grammarAccess;
 	
    public InternalSensidlParser(TokenStream input, SensidlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "IdentifiableElement";	
   	}
   	
   	@Override
   	protected SensidlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleIdentifiableElement
entryRuleIdentifiableElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentifiableElementRule()); }
	 iv_ruleIdentifiableElement=ruleIdentifiableElement 
	 { $current=$iv_ruleIdentifiableElement.current; } 
	 EOF 
;

// Rule IdentifiableElement
ruleIdentifiableElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIdentifiableElementAccess().getNamedElementParserRuleCall_0()); 
    }
    this_NamedElement_0=ruleNamedElement
    { 
        $current = $this_NamedElement_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIdentifiableElementAccess().getEncodingSettingsParserRuleCall_1()); 
    }
    this_EncodingSettings_1=ruleEncodingSettings
    { 
        $current = $this_EncodingSettings_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIdentifiableElementAccess().getSensorDataDescriptionParserRuleCall_2()); 
    }
    this_SensorDataDescription_2=ruleSensorDataDescription
    { 
        $current = $this_SensorDataDescription_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIdentifiableElementAccess().getDataAdjustmentParserRuleCall_3()); 
    }
    this_DataAdjustment_3=ruleDataAdjustment
    { 
        $current = $this_DataAdjustment_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIdentifiableElementAccess().getIntervalParserRuleCall_4()); 
    }
    this_Interval_4=ruleInterval
    { 
        $current = $this_Interval_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNamedElement
entryRuleNamedElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedElementRule()); }
	 iv_ruleNamedElement=ruleNamedElement 
	 { $current=$iv_ruleNamedElement.current; } 
	 EOF 
;

// Rule NamedElement
ruleNamedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getSensorInterfaceParserRuleCall_0()); 
    }
    this_SensorInterface_0=ruleSensorInterface
    { 
        $current = $this_SensorInterface_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getDataSetParserRuleCall_1()); 
    }
    this_DataSet_1=ruleDataSet
    { 
        $current = $this_DataSet_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getDataParserRuleCall_2()); 
    }
    this_Data_2=ruleData
    { 
        $current = $this_Data_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSensorInterface
entryRuleSensorInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorInterfaceRule()); }
	 iv_ruleSensorInterface=ruleSensorInterface 
	 { $current=$iv_ruleSensorInterface.current; } 
	 EOF 
;

// Rule SensorInterface
ruleSensorInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sensorInterface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorInterfaceAccess().getSensorInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSensorInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_description_2_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_2_0, grammarAccess.getSensorInterfaceAccess().getDescriptionDESCRIPTIONTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"DESCRIPTION");
	    }

)
)?(	otherlv_3='with' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorInterfaceAccess().getWithKeyword_3_0());
    }
	otherlv_4='identifier' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorInterfaceAccess().getIdentifierKeyword_3_1());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSensorInterfaceAccess().getColonKeyword_3_2());
    }
(
(
		lv_ID_6_0=RULE_STRING
		{
			newLeafNode(lv_ID_6_0, grammarAccess.getSensorInterfaceAccess().getIDSTRINGTerminalRuleCall_3_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_6_0, 
        		"STRING");
	    }

)
))?	otherlv_7='{' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSensorInterfaceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorInterfaceAccess().getEncodingSettingsEncodingSettingsParserRuleCall_5_0()); 
	    }
		lv_encodingSettings_8_0=ruleEncodingSettings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorInterfaceRule());
	        }
       		set(
       			$current, 
       			"encodingSettings",
        		lv_encodingSettings_8_0, 
        		"EncodingSettings");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorInterfaceAccess().getDataDescriptionSensorDataDescriptionParserRuleCall_6_0()); 
	    }
		lv_dataDescription_9_0=ruleSensorDataDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorInterfaceRule());
	        }
       		set(
       			$current, 
       			"dataDescription",
        		lv_dataDescription_9_0, 
        		"SensorDataDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSensorInterfaceAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleEncodingSettings
entryRuleEncodingSettings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEncodingSettingsRule()); }
	 iv_ruleEncodingSettings=ruleEncodingSettings 
	 { $current=$iv_ruleEncodingSettings.current; } 
	 EOF 
;

// Rule EncodingSettings
ruleEncodingSettings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='encoding' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEncodingSettingsAccess().getEncodingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEncodingSettingsAccess().getCodingCodingEnumRuleCall_1_0()); 
	    }
		lv_coding_1_0=ruleCoding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEncodingSettingsRule());
	        }
       		set(
       			$current, 
       			"coding",
        		lv_coding_1_0, 
        		"Coding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEncodingSettingsAccess().getWithKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEncodingSettingsAccess().getEndiannessEndiannessEnumRuleCall_3_0()); 
	    }
		lv_endianness_3_0=ruleEndianness		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEncodingSettingsRule());
	        }
       		set(
       			$current, 
       			"endianness",
        		lv_endianness_3_0, 
        		"Endianness");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='alignment' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEncodingSettingsAccess().getAlignmentKeyword_4());
    }
(
(
		lv_alignment_5_0=RULE_INT
		{
			newLeafNode(lv_alignment_5_0, grammarAccess.getEncodingSettingsAccess().getAlignmentINTTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEncodingSettingsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"alignment",
        		lv_alignment_5_0, 
        		"INT");
	    }

)
)	otherlv_6='BIT' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getEncodingSettingsAccess().getBITKeyword_6());
    }
(	otherlv_7='with' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEncodingSettingsAccess().getWithKeyword_7_0());
    }
	otherlv_8='identifier' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEncodingSettingsAccess().getIdentifierKeyword_7_1());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEncodingSettingsAccess().getColonKeyword_7_2());
    }
(
(
		lv_ID_10_0=RULE_STRING
		{
			newLeafNode(lv_ID_10_0, grammarAccess.getEncodingSettingsAccess().getIDSTRINGTerminalRuleCall_7_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEncodingSettingsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_10_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleSensorDataDescription
entryRuleSensorDataDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorDataDescriptionRule()); }
	 iv_ruleSensorDataDescription=ruleSensorDataDescription 
	 { $current=$iv_ruleSensorDataDescription.current; } 
	 EOF 
;

// Rule SensorDataDescription
ruleSensorDataDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sensorData' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorDataDescriptionAccess().getSensorDataKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSensorDataDescriptionAccess().getSensorDataDescriptionAction_1(),
            $current);
    }
)(	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSensorDataDescriptionAccess().getWithKeyword_2_0());
    }
	otherlv_3='identifier' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorDataDescriptionAccess().getIdentifierKeyword_2_1());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorDataDescriptionAccess().getColonKeyword_2_2());
    }
(
(
		lv_ID_5_0=RULE_STRING
		{
			newLeafNode(lv_ID_5_0, grammarAccess.getSensorDataDescriptionAccess().getIDSTRINGTerminalRuleCall_2_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorDataDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_5_0, 
        		"STRING");
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSensorDataDescriptionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDataDescriptionAccess().getDataSetsDataSetParserRuleCall_4_0()); 
	    }
		lv_dataSets_7_0=ruleDataSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDataDescriptionRule());
	        }
       		add(
       			$current, 
       			"dataSets",
        		lv_dataSets_7_0, 
        		"DataSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSensorDataDescriptionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleDataSet
entryRuleDataSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataSetRule()); }
	 iv_ruleDataSet=ruleDataSet 
	 { $current=$iv_ruleDataSet.current; } 
	 EOF 
;

// Rule DataSet
ruleDataSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dataSet' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataSetAccess().getDataSetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDataSetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataSetAccess().getWithKeyword_2_0());
    }
	otherlv_3='identifier' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataSetAccess().getIdentifierKeyword_2_1());
    }
(
(
		lv_ID_4_0=RULE_STRING
		{
			newLeafNode(lv_ID_4_0, grammarAccess.getDataSetAccess().getIDSTRINGTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_4_0, 
        		"STRING");
	    }

)
))?(
(
		lv_description_5_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_5_0, grammarAccess.getDataSetAccess().getDescriptionDESCRIPTIONTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_5_0, 
        		"DESCRIPTION");
	    }

)
)?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataSetAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataSetAccess().getDataDataParserRuleCall_5_0()); 
	    }
		lv_data_7_0=ruleData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataSetRule());
	        }
       		add(
       			$current, 
       			"data",
        		lv_data_7_0, 
        		"Data");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDataSetAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleData
entryRuleData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	 iv_ruleData=ruleData 
	 { $current=$iv_ruleData.current; } 
	 EOF 
;

// Rule Data
ruleData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataAccess().getMeasurementDataParserRuleCall_0()); 
    }
    this_MeasurementData_0=ruleMeasurementData
    { 
        $current = $this_MeasurementData_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataAccess().getNonMeasurementDataParserRuleCall_1()); 
    }
    this_NonMeasurementData_1=ruleNonMeasurementData
    { 
        $current = $this_NonMeasurementData_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMeasurementData
entryRuleMeasurementData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasurementDataRule()); }
	 iv_ruleMeasurementData=ruleMeasurementData 
	 { $current=$iv_ruleMeasurementData.current; } 
	 EOF 
;

// Rule MeasurementData
ruleMeasurementData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMeasurementDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMeasurementDataAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getDataTypeDataTypeEnumRuleCall_2_0()); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMeasurementDataAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getUnitUNITParserRuleCall_4_0()); 
	    }
		lv_unit_4_0=ruleUNIT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_4_0, 
        		"UNIT");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='with' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMeasurementDataAccess().getWithKeyword_5_0());
    }
	otherlv_6='identifier' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMeasurementDataAccess().getIdentifierKeyword_5_1());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMeasurementDataAccess().getColonKeyword_5_2());
    }
(
(
		lv_ID_8_0=RULE_STRING
		{
			newLeafNode(lv_ID_8_0, grammarAccess.getMeasurementDataAccess().getIDSTRINGTerminalRuleCall_5_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_8_0, 
        		"STRING");
	    }

)
))?(	otherlv_9='adjusted by' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMeasurementDataAccess().getAdjustedByKeyword_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataAdjustmentParserRuleCall_6_1_0()); 
	    }
		lv_adjustments_10_0=ruleDataAdjustment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_10_0, 
        		"DataAdjustment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMeasurementDataAccess().getCommaKeyword_6_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataAdjustmentParserRuleCall_6_2_1_0()); 
	    }
		lv_adjustments_12_0=ruleDataAdjustment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_12_0, 
        		"DataAdjustment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_description_13_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_13_0, grammarAccess.getMeasurementDataAccess().getDescriptionDESCRIPTIONTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_13_0, 
        		"DESCRIPTION");
	    }

)
)?)
;





// Entry rule entryRuleNonMeasurementData
entryRuleNonMeasurementData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonMeasurementDataRule()); }
	 iv_ruleNonMeasurementData=ruleNonMeasurementData 
	 { $current=$iv_ruleNonMeasurementData.current; } 
	 EOF 
;

// Rule NonMeasurementData
ruleNonMeasurementData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNonMeasurementDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNonMeasurementDataAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonMeasurementDataAccess().getDataTypeDataTypeEnumRuleCall_2_0()); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_constant_3_0=	'constant' 
    {
        newLeafNode(lv_constant_3_0, grammarAccess.getNonMeasurementDataAccess().getConstantConstantKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed($current, "constant", true, "constant");
	    }

)
)?(	otherlv_4='value' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNonMeasurementDataAccess().getValueKeyword_4_0());
    }
	otherlv_5='=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNonMeasurementDataAccess().getEqualsSignKeyword_4_1());
    }
(
(
		lv_value_6_0=RULE_STRING
		{
			newLeafNode(lv_value_6_0, grammarAccess.getNonMeasurementDataAccess().getValueSTRINGTerminalRuleCall_4_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"STRING");
	    }

)
))?(	otherlv_7='with' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNonMeasurementDataAccess().getWithKeyword_5_0());
    }
	otherlv_8='identifier' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNonMeasurementDataAccess().getIdentifierKeyword_5_1());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNonMeasurementDataAccess().getColonKeyword_5_2());
    }
(
(
		lv_ID_10_0=RULE_STRING
		{
			newLeafNode(lv_ID_10_0, grammarAccess.getNonMeasurementDataAccess().getIDSTRINGTerminalRuleCall_5_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_10_0, 
        		"STRING");
	    }

)
))?(
(
		lv_description_11_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_11_0, grammarAccess.getNonMeasurementDataAccess().getDescriptionDESCRIPTIONTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_11_0, 
        		"DESCRIPTION");
	    }

)
)?)
;





// Entry rule entryRuleDataAdjustment
entryRuleDataAdjustment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataAdjustmentRule()); }
	 iv_ruleDataAdjustment=ruleDataAdjustment 
	 { $current=$iv_ruleDataAdjustment.current; } 
	 EOF 
;

// Rule DataAdjustment
ruleDataAdjustment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataAdjustmentAccess().getDataRangeParserRuleCall_0()); 
    }
    this_DataRange_0=ruleDataRange
    { 
        $current = $this_DataRange_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataAdjustmentAccess().getDataConversionParserRuleCall_1()); 
    }
    this_DataConversion_1=ruleDataConversion
    { 
        $current = $this_DataConversion_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDataRange
entryRuleDataRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataRangeRule()); }
	 iv_ruleDataRange=ruleDataRange 
	 { $current=$iv_ruleDataRange.current; } 
	 EOF 
;

// Rule DataRange
ruleDataRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataRangeAccess().getWithKeyword_0());
    }
	otherlv_1='range' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataRangeAccess().getRangeKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataRangeAccess().getRangeIntervalParserRuleCall_2_0()); 
	    }
		lv_range_2_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataRangeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataRangeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	 iv_ruleInterval=ruleInterval 
	 { $current=$iv_ruleInterval.current; } 
	 EOF 
;

// Rule Interval
ruleInterval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalAccess().getLowerBoundDOUBLEParserRuleCall_0_0()); 
	    }
		lv_lowerBound_0_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntervalAccess().getSemicolonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalAccess().getUpperBoundDOUBLEParserRuleCall_2_0()); 
	    }
		lv_upperBound_2_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDataConversion
entryRuleDataConversion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataConversionRule()); }
	 iv_ruleDataConversion=ruleDataConversion 
	 { $current=$iv_ruleDataConversion.current; } 
	 EOF 
;

// Rule DataConversion
ruleDataConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataConversionAccess().getLinearDataConversionParserRuleCall_0()); 
    }
    this_LinearDataConversion_0=ruleLinearDataConversion
    { 
        $current = $this_LinearDataConversion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataConversionAccess().getLinearDataConversionWithIntervalParserRuleCall_1()); 
    }
    this_LinearDataConversionWithInterval_1=ruleLinearDataConversionWithInterval
    { 
        $current = $this_LinearDataConversionWithInterval_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLinearDataConversion
entryRuleLinearDataConversion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinearDataConversionRule()); }
	 iv_ruleLinearDataConversion=ruleLinearDataConversion 
	 { $current=$iv_ruleLinearDataConversion.current; } 
	 EOF 
;

// Rule LinearDataConversion
ruleLinearDataConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinearDataConversionAccess().getWithKeyword_0());
    }
	otherlv_1='scaling factor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinearDataConversionAccess().getScalingFactorKeyword_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinearDataConversionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getScalingFactorDOUBLEParserRuleCall_3_0()); 
	    }
		lv_scalingFactor_3_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"scalingFactor",
        		lv_scalingFactor_3_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='and' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinearDataConversionAccess().getAndKeyword_4());
    }
	otherlv_5='offset' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLinearDataConversionAccess().getOffsetKeyword_5());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLinearDataConversionAccess().getColonKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getOffsetDOUBLEParserRuleCall_7_0()); 
	    }
		lv_offset_7_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"offset",
        		lv_offset_7_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLinearDataConversionWithInterval
entryRuleLinearDataConversionWithInterval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinearDataConversionWithIntervalRule()); }
	 iv_ruleLinearDataConversionWithInterval=ruleLinearDataConversionWithInterval 
	 { $current=$iv_ruleLinearDataConversionWithInterval.current; } 
	 EOF 
;

// Rule LinearDataConversionWithInterval
ruleLinearDataConversionWithInterval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='linear mapping' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinearDataConversionWithIntervalAccess().getLinearMappingKeyword_0());
    }
	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinearDataConversionWithIntervalAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionWithIntervalAccess().getFromIntervalIntervalParserRuleCall_2_0()); 
	    }
		lv_fromInterval_2_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionWithIntervalRule());
	        }
       		set(
       			$current, 
       			"fromInterval",
        		lv_fromInterval_2_0, 
        		"Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLinearDataConversionWithIntervalAccess().getRightSquareBracketKeyword_3());
    }
	otherlv_4='=>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinearDataConversionWithIntervalAccess().getEqualsSignGreaterThanSignKeyword_4());
    }
	otherlv_5='[' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLinearDataConversionWithIntervalAccess().getLeftSquareBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionWithIntervalAccess().getToIntervalIntervalParserRuleCall_6_0()); 
	    }
		lv_toInterval_6_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionWithIntervalRule());
	        }
       		set(
       			$current, 
       			"toInterval",
        		lv_toInterval_6_0, 
        		"Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLinearDataConversionWithIntervalAccess().getRightSquareBracketKeyword_7());
    }
)
;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleUNIT
entryRuleUNIT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUNITRule()); } 
	 iv_ruleUNIT=ruleUNIT 
	 { $current=$iv_ruleUNIT.current.getText(); }  
	 EOF 
;

// Rule UNIT
ruleUNIT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getUNITAccess().getIDTerminalRuleCall()); 
    }

    ;





// Rule Coding
ruleCoding returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='SENSIDL_BINARY' 
	{
        $current = grammarAccess.getCodingAccess().getSENSIDL_BINARYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCodingAccess().getSENSIDL_BINARYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='SENSIDL_JSON' 
	{
        $current = grammarAccess.getCodingAccess().getSENSIDL_JSONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCodingAccess().getSENSIDL_JSONEnumLiteralDeclaration_1()); 
    }
));



// Rule Endianness
ruleEndianness returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='BIG_ENDIAN' 
	{
        $current = grammarAccess.getEndiannessAccess().getBIG_ENDIANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEndiannessAccess().getBIG_ENDIANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='LITTLE_ENDIAN' 
	{
        $current = grammarAccess.getEndiannessAccess().getLITTLE_ENDIANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEndiannessAccess().getLITTLE_ENDIANEnumLiteralDeclaration_1()); 
    }
));



// Rule DataType
ruleDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='INT8' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT8EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getINT8EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='UINT8' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT8EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getUINT8EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='INT16' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT16EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataTypeAccess().getINT16EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='UINT16' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT16EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataTypeAccess().getUINT16EnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='INT32' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT32EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getDataTypeAccess().getINT32EnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='UINT32' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT32EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getDataTypeAccess().getUINT32EnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='INT64' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT64EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getDataTypeAccess().getINT64EnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='UINT64' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT64EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getDataTypeAccess().getUINT64EnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='FLOAT' 
	{
        $current = grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='DOUBLE' 
	{
        $current = grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_9()); 
    }
));



RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_DESCRIPTION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


