/*
 * generated by Xtext
 */
grammar InternalSensidl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.fzi.sensidl.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fzi.sensidl.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fzi.sensidl.language.services.SensidlGrammarAccess;

}

@parser::members {

 	private SensidlGrammarAccess grammarAccess;
 	
    public InternalSensidlParser(TokenStream input, SensidlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "NamedElement";	
   	}
   	
   	@Override
   	protected SensidlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleNamedElement
entryRuleNamedElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamedElementRule()); }
	 iv_ruleNamedElement=ruleNamedElement 
	 { $current=$iv_ruleNamedElement.current; } 
	 EOF 
;

// Rule NamedElement
ruleNamedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getSensorInterfaceParserRuleCall_0()); 
    }
    this_SensorInterface_0=ruleSensorInterface
    { 
        $current = $this_SensorInterface_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getSensorDataDescriptionParserRuleCall_1()); 
    }
    this_SensorDataDescription_1=ruleSensorDataDescription
    { 
        $current = $this_SensorDataDescription_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getDataSetParserRuleCall_2()); 
    }
    this_DataSet_2=ruleDataSet
    { 
        $current = $this_DataSet_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNamedElementAccess().getDataParserRuleCall_3()); 
    }
    this_Data_3=ruleData
    { 
        $current = $this_Data_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSensorInterface
entryRuleSensorInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorInterfaceRule()); }
	 iv_ruleSensorInterface=ruleSensorInterface 
	 { $current=$iv_ruleSensorInterface.current; } 
	 EOF 
;

// Rule SensorInterface
ruleSensorInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sensorInterface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorInterfaceAccess().getSensorInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSensorInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getSensorInterfaceAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='with' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorInterfaceAccess().getWithKeyword_3_0());
    }
	otherlv_4='identifier' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorInterfaceAccess().getIdentifierKeyword_3_1());
    }
(
(
		lv_ID_5_0=RULE_STRING
		{
			newLeafNode(lv_ID_5_0, grammarAccess.getSensorInterfaceAccess().getIDSTRINGTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_5_0, 
        		"STRING");
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSensorInterfaceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorInterfaceAccess().getMetaInformationSensorMetaInformationParserRuleCall_5_0()); 
	    }
		lv_metaInformation_7_0=ruleSensorMetaInformation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorInterfaceRule());
	        }
       		set(
       			$current, 
       			"metaInformation",
        		lv_metaInformation_7_0, 
        		"SensorMetaInformation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorInterfaceAccess().getDataDescriptionSensorDataDescriptionParserRuleCall_6_0()); 
	    }
		lv_dataDescription_8_0=ruleSensorDataDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorInterfaceRule());
	        }
       		set(
       			$current, 
       			"dataDescription",
        		lv_dataDescription_8_0, 
        		"SensorDataDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSensorInterfaceAccess().getRightCurlyBracketKeyword_7());
    }
	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSensorInterfaceAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleSensorMetaInformation
entryRuleSensorMetaInformation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorMetaInformationRule()); }
	 iv_ruleSensorMetaInformation=ruleSensorMetaInformation 
	 { $current=$iv_ruleSensorMetaInformation.current; } 
	 EOF 
;

// Rule SensorMetaInformation
ruleSensorMetaInformation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='encoding' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorMetaInformationAccess().getEncodingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorMetaInformationAccess().getCodingCodingEnumRuleCall_1_0()); 
	    }
		lv_coding_1_0=ruleCoding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorMetaInformationRule());
	        }
       		set(
       			$current, 
       			"coding",
        		lv_coding_1_0, 
        		"Coding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='with' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSensorMetaInformationAccess().getWithKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorMetaInformationAccess().getEndiannessEndiannessEnumRuleCall_3_0()); 
	    }
		lv_endianness_3_0=ruleEndianness		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorMetaInformationRule());
	        }
       		set(
       			$current, 
       			"endianness",
        		lv_endianness_3_0, 
        		"Endianness");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='alignment' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorMetaInformationAccess().getAlignmentKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorMetaInformationAccess().getAlignmentAlignmentEnumRuleCall_5_0()); 
	    }
		lv_alignment_5_0=ruleAlignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorMetaInformationRule());
	        }
       		set(
       			$current, 
       			"alignment",
        		lv_alignment_5_0, 
        		"Alignment");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSensorMetaInformationAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleSensorDataDescription
entryRuleSensorDataDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorDataDescriptionRule()); }
	 iv_ruleSensorDataDescription=ruleSensorDataDescription 
	 { $current=$iv_ruleSensorDataDescription.current; } 
	 EOF 
;

// Rule SensorDataDescription
ruleSensorDataDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sensorData' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorDataDescriptionAccess().getSensorDataKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSensorDataDescriptionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorDataDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getSensorDataDescriptionAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorDataDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='with' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorDataDescriptionAccess().getWithKeyword_3_0());
    }
	otherlv_4='identifier' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorDataDescriptionAccess().getIdentifierKeyword_3_1());
    }
(
(
		lv_ID_5_0=RULE_STRING
		{
			newLeafNode(lv_ID_5_0, grammarAccess.getSensorDataDescriptionAccess().getIDSTRINGTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorDataDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_5_0, 
        		"STRING");
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSensorDataDescriptionAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDataDescriptionAccess().getDataSetsDataSetParserRuleCall_5_0()); 
	    }
		lv_dataSets_7_0=ruleDataSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDataDescriptionRule());
	        }
       		add(
       			$current, 
       			"dataSets",
        		lv_dataSets_7_0, 
        		"DataSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSensorDataDescriptionAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSensorDataDescriptionAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleDataSet
entryRuleDataSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataSetRule()); }
	 iv_ruleDataSet=ruleDataSet 
	 { $current=$iv_ruleDataSet.current; } 
	 EOF 
;

// Rule DataSet
ruleDataSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dataSet' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataSetAccess().getDataSetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDataSetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_description_2_0=RULE_STRING
		{
			newLeafNode(lv_description_2_0, grammarAccess.getDataSetAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"STRING");
	    }

)
)?(	otherlv_3='with' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataSetAccess().getWithKeyword_3_0());
    }
	otherlv_4='identifier' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDataSetAccess().getIdentifierKeyword_3_1());
    }
(
(
		lv_ID_5_0=RULE_STRING
		{
			newLeafNode(lv_ID_5_0, grammarAccess.getDataSetAccess().getIDSTRINGTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_5_0, 
        		"STRING");
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataSetAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataSetAccess().getSubDataSetsDataSetParserRuleCall_5_0()); 
	    }
		lv_subDataSets_7_0=ruleDataSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataSetRule());
	        }
       		add(
       			$current, 
       			"subDataSets",
        		lv_subDataSets_7_0, 
        		"DataSet");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDataSetAccess().getDataDataParserRuleCall_6_0()); 
	    }
		lv_data_8_0=ruleData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataSetRule());
	        }
       		add(
       			$current, 
       			"data",
        		lv_data_8_0, 
        		"Data");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getDataSetAccess().getRightCurlyBracketKeyword_7());
    }
	otherlv_10=';' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDataSetAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleData
entryRuleData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	 iv_ruleData=ruleData 
	 { $current=$iv_ruleData.current; } 
	 EOF 
;

// Rule Data
ruleData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataAccess().getMeasurementDataParserRuleCall_0()); 
    }
    this_MeasurementData_0=ruleMeasurementData
    { 
        $current = $this_MeasurementData_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataAccess().getNonMeasurementDataParserRuleCall_1()); 
    }
    this_NonMeasurementData_1=ruleNonMeasurementData
    { 
        $current = $this_NonMeasurementData_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMeasurementData
entryRuleMeasurementData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasurementDataRule()); }
	 iv_ruleMeasurementData=ruleMeasurementData 
	 { $current=$iv_ruleMeasurementData.current; } 
	 EOF 
;

// Rule MeasurementData
ruleMeasurementData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMeasurementDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMeasurementDataAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getDataTypeDataTypeEnumRuleCall_2_0()); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMeasurementDataAccess().getInKeyword_3());
    }
(
(
		lv_unit_4_0=RULE_UNIT
		{
			newLeafNode(lv_unit_4_0, grammarAccess.getMeasurementDataAccess().getUnitUNITTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"unit",
        		lv_unit_4_0, 
        		"UNIT");
	    }

)
)(	otherlv_5='with' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMeasurementDataAccess().getWithKeyword_5_0());
    }
	otherlv_6='identifier' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMeasurementDataAccess().getIdentifierKeyword_5_1());
    }
(
(
		lv_ID_7_0=RULE_STRING
		{
			newLeafNode(lv_ID_7_0, grammarAccess.getMeasurementDataAccess().getIDSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_7_0, 
        		"STRING");
	    }

)
))?(	otherlv_8='adjusted' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMeasurementDataAccess().getAdjustedKeyword_6_0());
    }
	otherlv_9='by' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMeasurementDataAccess().getByKeyword_6_1());
    }
	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMeasurementDataAccess().getColonKeyword_6_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataAdjustementParserRuleCall_6_3_0()); 
	    }
		lv_adjustments_11_0=ruleDataAdjustement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_11_0, 
        		"DataAdjustement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMeasurementDataAccess().getCommaKeyword_6_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataAdjustementParserRuleCall_6_4_1_0()); 
	    }
		lv_adjustments_13_0=ruleDataAdjustement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_13_0, 
        		"DataAdjustement");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_description_14_0=RULE_STRING
		{
			newLeafNode(lv_description_14_0, grammarAccess.getMeasurementDataAccess().getDescriptionSTRINGTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_14_0, 
        		"STRING");
	    }

)
)?	otherlv_15=';' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMeasurementDataAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleNonMeasurementData
entryRuleNonMeasurementData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonMeasurementDataRule()); }
	 iv_ruleNonMeasurementData=ruleNonMeasurementData 
	 { $current=$iv_ruleNonMeasurementData.current; } 
	 EOF 
;

// Rule NonMeasurementData
ruleNonMeasurementData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNonMeasurementDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNonMeasurementDataAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonMeasurementDataAccess().getDataTypeDataTypeEnumRuleCall_2_0()); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_2_0, 
        		"DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='constant' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNonMeasurementDataAccess().getConstantKeyword_3());
    }
	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNonMeasurementDataAccess().getEqualsSignKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNonMeasurementDataAccess().getConstantBOOLEANParserRuleCall_5_0()); 
	    }
		lv_constant_5_0=ruleBOOLEAN		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"constant",
        		lv_constant_5_0, 
        		"BOOLEAN");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='value' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNonMeasurementDataAccess().getValueKeyword_6());
    }
	otherlv_7='=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getNonMeasurementDataAccess().getEqualsSignKeyword_7());
    }
(
(
		lv_value_8_0=RULE_STRING
		{
			newLeafNode(lv_value_8_0, grammarAccess.getNonMeasurementDataAccess().getValueSTRINGTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_8_0, 
        		"STRING");
	    }

)
)(	otherlv_9='with' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNonMeasurementDataAccess().getWithKeyword_9_0());
    }
	otherlv_10='identifier' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNonMeasurementDataAccess().getIdentifierKeyword_9_1());
    }
(
(
		lv_ID_11_0=RULE_STRING
		{
			newLeafNode(lv_ID_11_0, grammarAccess.getNonMeasurementDataAccess().getIDSTRINGTerminalRuleCall_9_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_11_0, 
        		"STRING");
	    }

)
))?(
(
		lv_description_12_0=RULE_STRING
		{
			newLeafNode(lv_description_12_0, grammarAccess.getNonMeasurementDataAccess().getDescriptionSTRINGTerminalRuleCall_10_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_12_0, 
        		"STRING");
	    }

)
)?	otherlv_13=';' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getNonMeasurementDataAccess().getSemicolonKeyword_11());
    }
)
;





// Entry rule entryRuleDataAdjustement
entryRuleDataAdjustement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataAdjustementRule()); }
	 iv_ruleDataAdjustement=ruleDataAdjustement 
	 { $current=$iv_ruleDataAdjustement.current; } 
	 EOF 
;

// Rule DataAdjustement
ruleDataAdjustement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataAdjustementAccess().getDataRangeParserRuleCall_0()); 
    }
    this_DataRange_0=ruleDataRange
    { 
        $current = $this_DataRange_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataAdjustementAccess().getDataConversionParserRuleCall_1()); 
    }
    this_DataConversion_1=ruleDataConversion
    { 
        $current = $this_DataConversion_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDataRange
entryRuleDataRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataRangeRule()); }
	 iv_ruleDataRange=ruleDataRange 
	 { $current=$iv_ruleDataRange.current; } 
	 EOF 
;

// Rule DataRange
ruleDataRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataRangeAccess().getWithKeyword_0());
    }
	otherlv_1='range' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDataRangeAccess().getRangeKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataRangeAccess().getRangeIntervalParserRuleCall_2_0()); 
	    }
		lv_range_2_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataRangeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_2_0, 
        		"Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDataRangeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	 iv_ruleInterval=ruleInterval 
	 { $current=$iv_ruleInterval.current; } 
	 EOF 
;

// Rule Interval
ruleInterval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalAccess().getLowerBoundDOUBLEParserRuleCall_0_0()); 
	    }
		lv_lowerBound_0_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_0_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='...' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntervalAccess().getFullStopFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalAccess().getUpperBoundDOUBLEParserRuleCall_2_0()); 
	    }
		lv_upperBound_2_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_2_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDataConversion
entryRuleDataConversion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataConversionRule()); }
	 iv_ruleDataConversion=ruleDataConversion 
	 { $current=$iv_ruleDataConversion.current; } 
	 EOF 
;

// Rule DataConversion
ruleDataConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getDataConversionAccess().getLinearDataConversionParserRuleCall()); 
    }
    this_LinearDataConversion_0=ruleLinearDataConversion
    { 
        $current = $this_LinearDataConversion_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleLinearDataConversion
entryRuleLinearDataConversion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinearDataConversionRule()); }
	 iv_ruleLinearDataConversion=ruleLinearDataConversion 
	 { $current=$iv_ruleLinearDataConversion.current; } 
	 EOF 
;

// Rule LinearDataConversion
ruleLinearDataConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='with' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinearDataConversionAccess().getWithKeyword_0_0());
    }
	otherlv_1='scaling factor' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinearDataConversionAccess().getScalingFactorKeyword_0_1());
    }
	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinearDataConversionAccess().getColonKeyword_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getScalingFactorDOUBLEParserRuleCall_0_3_0()); 
	    }
		lv_scalingFactor_3_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"scalingFactor",
        		lv_scalingFactor_3_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='and' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinearDataConversionAccess().getAndKeyword_0_4());
    }
	otherlv_5='offset' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLinearDataConversionAccess().getOffsetKeyword_0_5());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLinearDataConversionAccess().getColonKeyword_0_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getOffsetDOUBLEParserRuleCall_0_7_0()); 
	    }
		lv_offset_7_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"offset",
        		lv_offset_7_0, 
        		"DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_8='linear mapping' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLinearDataConversionAccess().getLinearMappingKeyword_1_0());
    }
	otherlv_9='[' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLinearDataConversionAccess().getLeftSquareBracketKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getFromIntervalIntervalParserRuleCall_1_2_0()); 
	    }
		lv_fromInterval_10_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"fromInterval",
        		lv_fromInterval_10_0, 
        		"Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLinearDataConversionAccess().getRightSquareBracketKeyword_1_3());
    }
	otherlv_12='=>' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getLinearDataConversionAccess().getEqualsSignGreaterThanSignKeyword_1_4());
    }
	otherlv_13='[' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getLinearDataConversionAccess().getLeftSquareBracketKeyword_1_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getToIntervalIntervalParserRuleCall_1_6_0()); 
	    }
		lv_toInterval_14_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"toInterval",
        		lv_toInterval_14_0, 
        		"Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15=']' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getLinearDataConversionAccess().getRightSquareBracketKeyword_1_7());
    }
))
;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleBOOLEAN
entryRuleBOOLEAN returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBOOLEANRule()); } 
	 iv_ruleBOOLEAN=ruleBOOLEAN 
	 { $current=$iv_ruleBOOLEAN.current.getText(); }  
	 EOF 
;

// Rule BOOLEAN
ruleBOOLEAN returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBOOLEANAccess().getFalseKeyword_1()); 
    }
)
    ;





// Rule Alignment
ruleAlignment returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='_8BIT' 
	{
        $current = grammarAccess.getAlignmentAccess().get_8BITEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getAlignmentAccess().get_8BITEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='_16BIT' 
	{
        $current = grammarAccess.getAlignmentAccess().get_16BITEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getAlignmentAccess().get_16BITEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='_32BIT' 
	{
        $current = grammarAccess.getAlignmentAccess().get_32BITEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getAlignmentAccess().get_32BITEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='_64BIT' 
	{
        $current = grammarAccess.getAlignmentAccess().get_64BITEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getAlignmentAccess().get_64BITEnumLiteralDeclaration_3()); 
    }
));



// Rule Coding
ruleCoding returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='SENSIDL_BINARY' 
	{
        $current = grammarAccess.getCodingAccess().getSENSIDL_BINARYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCodingAccess().getSENSIDL_BINARYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='SENSIDL_JSON' 
	{
        $current = grammarAccess.getCodingAccess().getSENSIDL_JSONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCodingAccess().getSENSIDL_JSONEnumLiteralDeclaration_1()); 
    }
));



// Rule Endianness
ruleEndianness returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='BIG_ENDIAN' 
	{
        $current = grammarAccess.getEndiannessAccess().getBIG_ENDIANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEndiannessAccess().getBIG_ENDIANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='LITTLE_ENDIAN' 
	{
        $current = grammarAccess.getEndiannessAccess().getLITTLE_ENDIANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEndiannessAccess().getLITTLE_ENDIANEnumLiteralDeclaration_1()); 
    }
));



// Rule DataType
ruleDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='SIGNED_CHAR' 
	{
        $current = grammarAccess.getDataTypeAccess().getSIGNED_CHAREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getSIGNED_CHAREnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='UNSIGNED_CHAR' 
	{
        $current = grammarAccess.getDataTypeAccess().getUNSIGNED_CHAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getUNSIGNED_CHAREnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='SIGNED_SHORT' 
	{
        $current = grammarAccess.getDataTypeAccess().getSIGNED_SHORTEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataTypeAccess().getSIGNED_SHORTEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='UNSIGNED_SHORT' 
	{
        $current = grammarAccess.getDataTypeAccess().getUNSIGNED_SHORTEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataTypeAccess().getUNSIGNED_SHORTEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='SIGNED_LONG' 
	{
        $current = grammarAccess.getDataTypeAccess().getSIGNED_LONGEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getDataTypeAccess().getSIGNED_LONGEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='UNSIGNED_LONG' 
	{
        $current = grammarAccess.getDataTypeAccess().getUNSIGNED_LONGEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getDataTypeAccess().getUNSIGNED_LONGEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='SIGNED_LONG_LONG' 
	{
        $current = grammarAccess.getDataTypeAccess().getSIGNED_LONG_LONGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getDataTypeAccess().getSIGNED_LONG_LONGEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='UNSIGNED_LONG_LONG' 
	{
        $current = grammarAccess.getDataTypeAccess().getUNSIGNED_LONG_LONGEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getDataTypeAccess().getUNSIGNED_LONG_LONGEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='FLOAT' 
	{
        $current = grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='DOUBLE' 
	{
        $current = grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='LONG_DOUBLE' 
	{
        $current = grammarAccess.getDataTypeAccess().getLONG_DOUBLEEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getDataTypeAccess().getLONG_DOUBLEEnumLiteralDeclaration_10()); 
    }
));



RULE_UNIT : '^'? ('a'..'z'|'A'..'Z') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


