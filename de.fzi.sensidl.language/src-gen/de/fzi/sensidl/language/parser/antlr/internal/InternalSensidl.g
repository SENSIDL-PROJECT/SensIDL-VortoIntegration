/*
 * generated by Xtext
 */
grammar InternalSensidl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.fzi.sensidl.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fzi.sensidl.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fzi.sensidl.language.services.SensidlGrammarAccess;

}

@parser::members {

 	private SensidlGrammarAccess grammarAccess;
 	
    public InternalSensidlParser(TokenStream input, SensidlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SensorInterface";	
   	}
   	
   	@Override
   	protected SensidlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSensorInterface
entryRuleSensorInterface returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorInterfaceRule()); }
	 iv_ruleSensorInterface=ruleSensorInterface 
	 { $current=$iv_ruleSensorInterface.current; } 
	 EOF 
;

// Rule SensorInterface
ruleSensorInterface returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sensorInterface' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorInterfaceAccess().getSensorInterfaceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSensorInterfaceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(
(
		lv_description_2_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_2_0, grammarAccess.getSensorInterfaceAccess().getDescriptionDESCRIPTIONTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_2_0, 
        		"de.fzi.sensidl.language.Sensidl.DESCRIPTION");
	    }

)
)?(	otherlv_3='with identifier' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorInterfaceAccess().getWithIdentifierKeyword_3_0());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSensorInterfaceAccess().getColonKeyword_3_1());
    }
(
(
		lv_ID_5_0=RULE_STRING
		{
			newLeafNode(lv_ID_5_0, grammarAccess.getSensorInterfaceAccess().getIDSTRINGTerminalRuleCall_3_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorInterfaceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_5_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSensorInterfaceAccess().getLeftCurlyBracketKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorInterfaceAccess().getEncodingSettingsEncodingSettingsParserRuleCall_5_0()); 
	    }
		lv_encodingSettings_7_0=ruleEncodingSettings		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorInterfaceRule());
	        }
       		set(
       			$current, 
       			"encodingSettings",
        		lv_encodingSettings_7_0, 
        		"de.fzi.sensidl.language.Sensidl.EncodingSettings");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorInterfaceAccess().getDataDescriptionSensorDataDescriptionParserRuleCall_6_0()); 
	    }
		lv_dataDescription_8_0=ruleSensorDataDescription		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorInterfaceRule());
	        }
       		set(
       			$current, 
       			"dataDescription",
        		lv_dataDescription_8_0, 
        		"de.fzi.sensidl.language.Sensidl.SensorDataDescription");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSensorInterfaceAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleEncodingSettings
entryRuleEncodingSettings returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEncodingSettingsRule()); }
	 iv_ruleEncodingSettings=ruleEncodingSettings 
	 { $current=$iv_ruleEncodingSettings.current; } 
	 EOF 
;

// Rule EncodingSettings
ruleEncodingSettings returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='encoding' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEncodingSettingsAccess().getEncodingKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEncodingSettingsAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEncodingSettingsAccess().getCodingCodingEnumRuleCall_2_0()); 
	    }
		lv_coding_2_0=ruleCoding		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEncodingSettingsRule());
	        }
       		set(
       			$current, 
       			"coding",
        		lv_coding_2_0, 
        		"de.fzi.sensidl.language.Sensidl.Coding");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEncodingSettingsAccess().getCommaKeyword_3());
    }
	otherlv_4='endianness' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEncodingSettingsAccess().getEndiannessKeyword_4());
    }
	otherlv_5=':' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEncodingSettingsAccess().getColonKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEncodingSettingsAccess().getEndiannessEndiannessEnumRuleCall_6_0()); 
	    }
		lv_endianness_6_0=ruleEndianness		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEncodingSettingsRule());
	        }
       		set(
       			$current, 
       			"endianness",
        		lv_endianness_6_0, 
        		"de.fzi.sensidl.language.Sensidl.Endianness");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEncodingSettingsAccess().getCommaKeyword_7());
    }
	otherlv_8='alignment' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEncodingSettingsAccess().getAlignmentKeyword_8());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getEncodingSettingsAccess().getColonKeyword_9());
    }
(
(
		lv_alignment_10_0=RULE_INT
		{
			newLeafNode(lv_alignment_10_0, grammarAccess.getEncodingSettingsAccess().getAlignmentINTTerminalRuleCall_10_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEncodingSettingsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"alignment",
        		lv_alignment_10_0, 
        		"org.eclipse.xtext.common.Terminals.INT");
	    }

)
)	otherlv_11='BIT' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getEncodingSettingsAccess().getBITKeyword_11());
    }
(	otherlv_12='with identifier' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getEncodingSettingsAccess().getWithIdentifierKeyword_12_0());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getEncodingSettingsAccess().getColonKeyword_12_1());
    }
(
(
		lv_ID_14_0=RULE_STRING
		{
			newLeafNode(lv_ID_14_0, grammarAccess.getEncodingSettingsAccess().getIDSTRINGTerminalRuleCall_12_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEncodingSettingsRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_14_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?)
;





// Entry rule entryRuleSensorDataDescription
entryRuleSensorDataDescription returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSensorDataDescriptionRule()); }
	 iv_ruleSensorDataDescription=ruleSensorDataDescription 
	 { $current=$iv_ruleSensorDataDescription.current; } 
	 EOF 
;

// Rule SensorDataDescription
ruleSensorDataDescription returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='sensorData' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSensorDataDescriptionAccess().getSensorDataKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getSensorDataDescriptionAccess().getSensorDataDescriptionAction_1(),
            $current);
    }
)(	otherlv_2='with identifier' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSensorDataDescriptionAccess().getWithIdentifierKeyword_2_0());
    }
	otherlv_3=':' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSensorDataDescriptionAccess().getColonKeyword_2_1());
    }
(
(
		lv_ID_4_0=RULE_STRING
		{
			newLeafNode(lv_ID_4_0, grammarAccess.getSensorDataDescriptionAccess().getIDSTRINGTerminalRuleCall_2_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSensorDataDescriptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_4_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSensorDataDescriptionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSensorDataDescriptionAccess().getDataSetsDataSetParserRuleCall_4_0()); 
	    }
		lv_dataSets_6_0=ruleDataSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSensorDataDescriptionRule());
	        }
       		add(
       			$current, 
       			"dataSets",
        		lv_dataSets_6_0, 
        		"de.fzi.sensidl.language.Sensidl.DataSet");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSensorDataDescriptionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleDataSet
entryRuleDataSet returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataSetRule()); }
	 iv_ruleDataSet=ruleDataSet 
	 { $current=$iv_ruleDataSet.current; } 
	 EOF 
;

// Rule DataSet
ruleDataSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='dataSet' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataSetAccess().getDataSetKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDataSetAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)(	otherlv_2='uses' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDataSetAccess().getUsesKeyword_2_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
        }
	otherlv_3=RULE_ID
	{
		newLeafNode(otherlv_3, grammarAccess.getDataSetAccess().getUsedDataSetsDataSetCrossReference_2_1_0()); 
	}

)
))?(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDataSetAccess().getCommaKeyword_3_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getDataSetAccess().getUsedDataSetsDataSetCrossReference_3_1_0()); 
	}

)
))*(	otherlv_6='with identifier' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDataSetAccess().getWithIdentifierKeyword_4_0());
    }
	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDataSetAccess().getColonKeyword_4_1());
    }
(
(
		lv_ID_8_0=RULE_STRING
		{
			newLeafNode(lv_ID_8_0, grammarAccess.getDataSetAccess().getIDSTRINGTerminalRuleCall_4_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_8_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(
(
		lv_description_9_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_9_0, grammarAccess.getDataSetAccess().getDescriptionDESCRIPTIONTerminalRuleCall_5_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDataSetRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_9_0, 
        		"de.fzi.sensidl.language.Sensidl.DESCRIPTION");
	    }

)
)?	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getDataSetAccess().getLeftCurlyBracketKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDataSetAccess().getDataDataParserRuleCall_7_0_0()); 
	    }
		lv_data_11_0=ruleData		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataSetRule());
	        }
       		add(
       			$current, 
       			"data",
        		lv_data_11_0, 
        		"de.fzi.sensidl.language.Sensidl.Data");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDataSetAccess().getMethodMethodParserRuleCall_7_1_0()); 
	    }
		lv_method_12_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataSetRule());
	        }
       		add(
       			$current, 
       			"method",
        		lv_method_12_0, 
        		"de.fzi.sensidl.language.Sensidl.Method");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDataSetAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_visibility_0_0=	'+' 
    {
        newLeafNode(lv_visibility_0_0, grammarAccess.getMethodAccess().getVisibilityPlusSignKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "visibility", lv_visibility_0_0, "+");
	    }

)
)
    |(
(
		lv_visibility_1_0=	'-' 
    {
        newLeafNode(lv_visibility_1_0, grammarAccess.getMethodAccess().getVisibilityHyphenMinusKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "visibility", lv_visibility_1_0, "-");
	    }

)
)
    |(
(
		lv_visibility_2_0=	'#' 
    {
        newLeafNode(lv_visibility_2_0, grammarAccess.getMethodAccess().getVisibilityNumberSignKeyword_0_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "visibility", lv_visibility_2_0, "#");
	    }

)
)
    |(
(
		lv_visibility_3_0=	'~' 
    {
        newLeafNode(lv_visibility_3_0, grammarAccess.getMethodAccess().getVisibilityTildeKeyword_0_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed($current, "visibility", lv_visibility_3_0, "~");
	    }

)
))?(
(
		lv_name_4_0=RULE_ID
		{
			newLeafNode(lv_name_4_0, grammarAccess.getMethodAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParameterMethodParameterParserRuleCall_3_0()); 
	    }
		lv_parameter_6_0=ruleMethodParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_6_0, 
        		"de.fzi.sensidl.language.Sensidl.MethodParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParameterMethodParameterParserRuleCall_4_1_0()); 
	    }
		lv_parameter_8_0=ruleMethodParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"parameter",
        		lv_parameter_8_0, 
        		"de.fzi.sensidl.language.Sensidl.MethodParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_10=':' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getColonKeyword_6_0());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeDataTypeEnumRuleCall_6_1_0_0_0()); 
	    }
		lv_returnType_11_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_11_0, 
        		"de.fzi.sensidl.language.Sensidl.DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getReturnTypeDataTypeNotAdjustableEnumRuleCall_6_1_0_1_0()); 
	    }
		lv_returnType_12_0=ruleDataTypeNotAdjustable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_12_0, 
        		"de.fzi.sensidl.language.Sensidl.DataTypeNotAdjustable");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
        }
	otherlv_13=RULE_ID
	{
		newLeafNode(otherlv_13, grammarAccess.getMethodAccess().getReturnTypeDataSetDataSetCrossReference_6_1_1_0()); 
	}

)
)))?	otherlv_14='as' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMethodAccess().getAsKeyword_7());
    }
	otherlv_15='Method' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMethodAccess().getMethodKeyword_8());
    }
(	otherlv_16='with identifier' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMethodAccess().getWithIdentifierKeyword_9_0());
    }
	otherlv_17=':' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMethodAccess().getColonKeyword_9_1());
    }
(
(
		lv_ID_18_0=RULE_STRING
		{
			newLeafNode(lv_ID_18_0, grammarAccess.getMethodAccess().getIDSTRINGTerminalRuleCall_9_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_18_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(
(
		lv_description_19_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_19_0, grammarAccess.getMethodAccess().getDescriptionDESCRIPTIONTerminalRuleCall_10_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_19_0, 
        		"de.fzi.sensidl.language.Sensidl.DESCRIPTION");
	    }

)
)?)
;





// Entry rule entryRuleMethodParameter
entryRuleMethodParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodParameterRule()); }
	 iv_ruleMethodParameter=ruleMethodParameter 
	 { $current=$iv_ruleMethodParameter.current; } 
	 EOF 
;

// Rule MethodParameter
ruleMethodParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodParameterAccess().getDataTypeDataTypeEnumRuleCall_0_0_0_0()); 
	    }
		lv_dataType_0_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodParameterRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_0_0, 
        		"de.fzi.sensidl.language.Sensidl.DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodParameterAccess().getDataTypeDataTypeNotAdjustableEnumRuleCall_0_0_1_0()); 
	    }
		lv_dataType_1_0=ruleDataTypeNotAdjustable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodParameterRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_1_0, 
        		"de.fzi.sensidl.language.Sensidl.DataTypeNotAdjustable");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodParameterRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getMethodParameterAccess().getDataTypeDataSetDataSetCrossReference_0_1_0()); 
	}

)
))(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getMethodParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMethodParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleData
entryRuleData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataRule()); }
	 iv_ruleData=ruleData 
	 { $current=$iv_ruleData.current; } 
	 EOF 
;

// Rule Data
ruleData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataAccess().getMeasurementDataParserRuleCall_0()); 
    }
    this_MeasurementData_0=ruleMeasurementData
    { 
        $current = $this_MeasurementData_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataAccess().getNonMeasurementDataParserRuleCall_1()); 
    }
    this_NonMeasurementData_1=ruleNonMeasurementData
    { 
        $current = $this_NonMeasurementData_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataAccess().getMeasurementDataNotAdjustableParserRuleCall_2()); 
    }
    this_MeasurementDataNotAdjustable_2=ruleMeasurementDataNotAdjustable
    { 
        $current = $this_MeasurementDataNotAdjustable_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataAccess().getListDataParserRuleCall_3()); 
    }
    this_ListData_3=ruleListData
    { 
        $current = $this_ListData_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleListData
entryRuleListData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getListDataRule()); }
	 iv_ruleListData=ruleListData 
	 { $current=$iv_ruleListData.current; } 
	 EOF 
;

// Rule ListData
ruleListData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getListDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getListDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getListDataAccess().getAsKeyword_1());
    }
	otherlv_2='list' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getListDataAccess().getListKeyword_2());
    }
	otherlv_3='of' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getListDataAccess().getOfKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListDataAccess().getDataTypeDataTypeEnumRuleCall_4_0_0()); 
	    }
		lv_dataType_4_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_4_0, 
        		"de.fzi.sensidl.language.Sensidl.DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getListDataRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getListDataAccess().getDataTypeDataSetDataSetCrossReference_4_1_0()); 
	}

)
)))
;





// Entry rule entryRuleMeasurementData
entryRuleMeasurementData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasurementDataRule()); }
	 iv_ruleMeasurementData=ruleMeasurementData 
	 { $current=$iv_ruleMeasurementData.current; } 
	 EOF 
;

// Rule MeasurementData
ruleMeasurementData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMeasurementDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMeasurementDataAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getDataTypeDataTypeEnumRuleCall_2_0()); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_2_0, 
        		"de.fzi.sensidl.language.Sensidl.DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMeasurementDataAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getUnitUNITParserRuleCall_4_0()); 
	    }
		lv_unit_4_0=ruleUNIT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_4_0, 
        		"de.fzi.sensidl.language.Sensidl.UNIT");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='with identifier' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMeasurementDataAccess().getWithIdentifierKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMeasurementDataAccess().getColonKeyword_5_1());
    }
(
(
		lv_ID_7_0=RULE_STRING
		{
			newLeafNode(lv_ID_7_0, grammarAccess.getMeasurementDataAccess().getIDSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_7_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?((	otherlv_8='adjusted' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMeasurementDataAccess().getAdjustedKeyword_6_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataConversionParserRuleCall_6_0_1_0()); 
	    }
		lv_adjustments_9_0=ruleDataConversion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_9_0, 
        		"de.fzi.sensidl.language.Sensidl.DataConversion");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_10='adjusted' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMeasurementDataAccess().getAdjustedKeyword_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataRangeParserRuleCall_6_1_1_0()); 
	    }
		lv_adjustments_11_0=ruleDataRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_11_0, 
        		"de.fzi.sensidl.language.Sensidl.DataRange");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_12='adjusted' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMeasurementDataAccess().getAdjustedKeyword_6_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataConversionParserRuleCall_6_2_1_0()); 
	    }
		lv_adjustments_13_0=ruleDataConversion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_13_0, 
        		"de.fzi.sensidl.language.Sensidl.DataConversion");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMeasurementDataAccess().getCommaKeyword_6_2_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataAccess().getAdjustmentsDataRangeParserRuleCall_6_2_3_0()); 
	    }
		lv_adjustments_15_0=ruleDataRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataRule());
	        }
       		add(
       			$current, 
       			"adjustments",
        		lv_adjustments_15_0, 
        		"de.fzi.sensidl.language.Sensidl.DataRange");
	        afterParserOrEnumRuleCall();
	    }

)
)))?(	otherlv_16='exclude:' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMeasurementDataAccess().getExcludeKeyword_7_0());
    }
(((
(
		lv_excludedMethods_17_0=	'setter' 
    {
        newLeafNode(lv_excludedMethods_17_0, grammarAccess.getMeasurementDataAccess().getExcludedMethodsSetterKeyword_7_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_17_0, "setter");
	    }

)
)(	otherlv_18=',' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getMeasurementDataAccess().getCommaKeyword_7_1_0_1_0());
    }
(
(
		lv_excludedMethods_19_0=	'getter' 
    {
        newLeafNode(lv_excludedMethods_19_0, grammarAccess.getMeasurementDataAccess().getExcludedMethodsGetterKeyword_7_1_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_19_0, "getter");
	    }

)
))?)
    |((
(
		lv_excludedMethods_20_0=	'getter' 
    {
        newLeafNode(lv_excludedMethods_20_0, grammarAccess.getMeasurementDataAccess().getExcludedMethodsGetterKeyword_7_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_20_0, "getter");
	    }

)
)(	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getMeasurementDataAccess().getCommaKeyword_7_1_1_1_0());
    }
(
(
		lv_excludedMethods_22_0=	'setter' 
    {
        newLeafNode(lv_excludedMethods_22_0, grammarAccess.getMeasurementDataAccess().getExcludedMethodsSetterKeyword_7_1_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_22_0, "setter");
	    }

)
))?)))?(
(
		lv_description_23_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_23_0, grammarAccess.getMeasurementDataAccess().getDescriptionDESCRIPTIONTerminalRuleCall_8_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_23_0, 
        		"de.fzi.sensidl.language.Sensidl.DESCRIPTION");
	    }

)
)?)
;





// Entry rule entryRuleNonMeasurementData
entryRuleNonMeasurementData returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonMeasurementDataRule()); }
	 iv_ruleNonMeasurementData=ruleNonMeasurementData 
	 { $current=$iv_ruleNonMeasurementData.current; } 
	 EOF 
;

// Rule NonMeasurementData
ruleNonMeasurementData returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getNonMeasurementDataAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNonMeasurementDataAccess().getAsKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getNonMeasurementDataAccess().getDataTypeDataTypeEnumRuleCall_2_0_0()); 
	    }
		lv_dataType_2_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_2_0, 
        		"de.fzi.sensidl.language.Sensidl.DataType");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNonMeasurementDataAccess().getDataTypeDataTypeNotAdjustableEnumRuleCall_2_1_0()); 
	    }
		lv_dataType_3_0=ruleDataTypeNotAdjustable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNonMeasurementDataRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_3_0, 
        		"de.fzi.sensidl.language.Sensidl.DataTypeNotAdjustable");
	        afterParserOrEnumRuleCall();
	    }

)
))(((
(
		lv_constant_4_0=	'constant' 
    {
        newLeafNode(lv_constant_4_0, grammarAccess.getNonMeasurementDataAccess().getConstantConstantKeyword_3_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed($current, "constant", true, "constant");
	    }

)
)	otherlv_5='value' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNonMeasurementDataAccess().getValueKeyword_3_0_1());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNonMeasurementDataAccess().getEqualsSignKeyword_3_0_2());
    }
(
(
		lv_value_7_0=RULE_STRING
		{
			newLeafNode(lv_value_7_0, grammarAccess.getNonMeasurementDataAccess().getValueSTRINGTerminalRuleCall_3_0_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_7_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))
    |(	otherlv_8='value' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNonMeasurementDataAccess().getValueKeyword_3_1_0());
    }
	otherlv_9='=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNonMeasurementDataAccess().getEqualsSignKeyword_3_1_1());
    }
(
(
		lv_value_10_0=RULE_STRING
		{
			newLeafNode(lv_value_10_0, grammarAccess.getNonMeasurementDataAccess().getValueSTRINGTerminalRuleCall_3_1_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_10_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
)))?(	otherlv_11='with identifier' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getNonMeasurementDataAccess().getWithIdentifierKeyword_4_0());
    }
	otherlv_12=':' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getNonMeasurementDataAccess().getColonKeyword_4_1());
    }
(
(
		lv_ID_13_0=RULE_STRING
		{
			newLeafNode(lv_ID_13_0, grammarAccess.getNonMeasurementDataAccess().getIDSTRINGTerminalRuleCall_4_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_13_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(	otherlv_14='exclude:' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getNonMeasurementDataAccess().getExcludeKeyword_5_0());
    }
(((
(
		lv_excludedMethods_15_0=	'setter' 
    {
        newLeafNode(lv_excludedMethods_15_0, grammarAccess.getNonMeasurementDataAccess().getExcludedMethodsSetterKeyword_5_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_15_0, "setter");
	    }

)
)(	otherlv_16=',' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getNonMeasurementDataAccess().getCommaKeyword_5_1_0_1_0());
    }
(
(
		lv_excludedMethods_17_0=	'getter' 
    {
        newLeafNode(lv_excludedMethods_17_0, grammarAccess.getNonMeasurementDataAccess().getExcludedMethodsGetterKeyword_5_1_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_17_0, "getter");
	    }

)
))?)
    |((
(
		lv_excludedMethods_18_0=	'getter' 
    {
        newLeafNode(lv_excludedMethods_18_0, grammarAccess.getNonMeasurementDataAccess().getExcludedMethodsGetterKeyword_5_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_18_0, "getter");
	    }

)
)(	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getNonMeasurementDataAccess().getCommaKeyword_5_1_1_1_0());
    }
(
(
		lv_excludedMethods_20_0=	'setter' 
    {
        newLeafNode(lv_excludedMethods_20_0, grammarAccess.getNonMeasurementDataAccess().getExcludedMethodsSetterKeyword_5_1_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_20_0, "setter");
	    }

)
))?)))?(
(
		lv_description_21_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_21_0, grammarAccess.getNonMeasurementDataAccess().getDescriptionDESCRIPTIONTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getNonMeasurementDataRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_21_0, 
        		"de.fzi.sensidl.language.Sensidl.DESCRIPTION");
	    }

)
)?)
;





// Entry rule entryRuleMeasurementDataNotAdjustable
entryRuleMeasurementDataNotAdjustable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMeasurementDataNotAdjustableRule()); }
	 iv_ruleMeasurementDataNotAdjustable=ruleMeasurementDataNotAdjustable 
	 { $current=$iv_ruleMeasurementDataNotAdjustable.current; } 
	 EOF 
;

// Rule MeasurementDataNotAdjustable
ruleMeasurementDataNotAdjustable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getMeasurementDataNotAdjustableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMeasurementDataNotAdjustableAccess().getAsKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataNotAdjustableAccess().getDataTypeDataTypeNotAdjustableEnumRuleCall_2_0()); 
	    }
		lv_dataType_2_0=ruleDataTypeNotAdjustable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_2_0, 
        		"de.fzi.sensidl.language.Sensidl.DataTypeNotAdjustable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMeasurementDataNotAdjustableAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMeasurementDataNotAdjustableAccess().getUnitUNITParserRuleCall_4_0()); 
	    }
		lv_unit_4_0=ruleUNIT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		set(
       			$current, 
       			"unit",
        		lv_unit_4_0, 
        		"de.fzi.sensidl.language.Sensidl.UNIT");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='with identifier' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMeasurementDataNotAdjustableAccess().getWithIdentifierKeyword_5_0());
    }
	otherlv_6=':' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMeasurementDataNotAdjustableAccess().getColonKeyword_5_1());
    }
(
(
		lv_ID_7_0=RULE_STRING
		{
			newLeafNode(lv_ID_7_0, grammarAccess.getMeasurementDataNotAdjustableAccess().getIDSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ID",
        		lv_ID_7_0, 
        		"org.eclipse.xtext.common.Terminals.STRING");
	    }

)
))?(	otherlv_8='exclude' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMeasurementDataNotAdjustableAccess().getExcludeKeyword_6_0());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMeasurementDataNotAdjustableAccess().getColonKeyword_6_1());
    }
(((
(
		lv_excludedMethods_10_0=	'setter' 
    {
        newLeafNode(lv_excludedMethods_10_0, grammarAccess.getMeasurementDataNotAdjustableAccess().getExcludedMethodsSetterKeyword_6_2_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_10_0, "setter");
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getMeasurementDataNotAdjustableAccess().getCommaKeyword_6_2_0_1_0());
    }
(
(
		lv_excludedMethods_12_0=	'getter' 
    {
        newLeafNode(lv_excludedMethods_12_0, grammarAccess.getMeasurementDataNotAdjustableAccess().getExcludedMethodsGetterKeyword_6_2_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_12_0, "getter");
	    }

)
))?)
    |((
(
		lv_excludedMethods_13_0=	'getter' 
    {
        newLeafNode(lv_excludedMethods_13_0, grammarAccess.getMeasurementDataNotAdjustableAccess().getExcludedMethodsGetterKeyword_6_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_13_0, "getter");
	    }

)
)(	otherlv_14=',' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getMeasurementDataNotAdjustableAccess().getCommaKeyword_6_2_1_1_0());
    }
(
(
		lv_excludedMethods_15_0=	'setter' 
    {
        newLeafNode(lv_excludedMethods_15_0, grammarAccess.getMeasurementDataNotAdjustableAccess().getExcludedMethodsSetterKeyword_6_2_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		addWithLastConsumed($current, "excludedMethods", lv_excludedMethods_15_0, "setter");
	    }

)
))?)))?(
(
		lv_description_16_0=RULE_DESCRIPTION
		{
			newLeafNode(lv_description_16_0, grammarAccess.getMeasurementDataNotAdjustableAccess().getDescriptionDESCRIPTIONTerminalRuleCall_7_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMeasurementDataNotAdjustableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"description",
        		lv_description_16_0, 
        		"de.fzi.sensidl.language.Sensidl.DESCRIPTION");
	    }

)
)?)
;





// Entry rule entryRuleDataRange
entryRuleDataRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataRangeRule()); }
	 iv_ruleDataRange=ruleDataRange 
	 { $current=$iv_ruleDataRange.current; } 
	 EOF 
;

// Rule DataRange
ruleDataRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with range' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDataRangeAccess().getWithRangeKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDataRangeAccess().getRangeIntervalParserRuleCall_1_0()); 
	    }
		lv_range_1_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDataRangeRule());
	        }
       		set(
       			$current, 
       			"range",
        		lv_range_1_0, 
        		"de.fzi.sensidl.language.Sensidl.Interval");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInterval
entryRuleInterval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntervalRule()); }
	 iv_ruleInterval=ruleInterval 
	 { $current=$iv_ruleInterval.current; } 
	 EOF 
;

// Rule Interval
ruleInterval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIntervalAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalAccess().getLowerBoundDOUBLEParserRuleCall_1_0()); 
	    }
		lv_lowerBound_1_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_1_0, 
        		"de.fzi.sensidl.language.Sensidl.DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getIntervalAccess().getSemicolonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntervalAccess().getUpperBoundDOUBLEParserRuleCall_3_0()); 
	    }
		lv_upperBound_3_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntervalRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_3_0, 
        		"de.fzi.sensidl.language.Sensidl.DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getIntervalAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDataConversion
entryRuleDataConversion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDataConversionRule()); }
	 iv_ruleDataConversion=ruleDataConversion 
	 { $current=$iv_ruleDataConversion.current; } 
	 EOF 
;

// Rule DataConversion
ruleDataConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDataConversionAccess().getLinearDataConversionParserRuleCall_0()); 
    }
    this_LinearDataConversion_0=ruleLinearDataConversion
    { 
        $current = $this_LinearDataConversion_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDataConversionAccess().getLinearDataConversionWithIntervalParserRuleCall_1()); 
    }
    this_LinearDataConversionWithInterval_1=ruleLinearDataConversionWithInterval
    { 
        $current = $this_LinearDataConversionWithInterval_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLinearDataConversion
entryRuleLinearDataConversion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinearDataConversionRule()); }
	 iv_ruleLinearDataConversion=ruleLinearDataConversion 
	 { $current=$iv_ruleLinearDataConversion.current; } 
	 EOF 
;

// Rule LinearDataConversion
ruleLinearDataConversion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='with scaling factor' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinearDataConversionAccess().getWithScalingFactorKeyword_0());
    }
	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinearDataConversionAccess().getColonKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getScalingFactorDOUBLEParserRuleCall_2_0()); 
	    }
		lv_scalingFactor_2_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"scalingFactor",
        		lv_scalingFactor_2_0, 
        		"de.fzi.sensidl.language.Sensidl.DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='and offset' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLinearDataConversionAccess().getAndOffsetKeyword_3());
    }
	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinearDataConversionAccess().getColonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionAccess().getOffsetDOUBLEParserRuleCall_5_0()); 
	    }
		lv_offset_5_0=ruleDOUBLE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionRule());
	        }
       		set(
       			$current, 
       			"offset",
        		lv_offset_5_0, 
        		"de.fzi.sensidl.language.Sensidl.DOUBLE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleLinearDataConversionWithInterval
entryRuleLinearDataConversionWithInterval returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinearDataConversionWithIntervalRule()); }
	 iv_ruleLinearDataConversionWithInterval=ruleLinearDataConversionWithInterval 
	 { $current=$iv_ruleLinearDataConversionWithInterval.current; } 
	 EOF 
;

// Rule LinearDataConversionWithInterval
ruleLinearDataConversionWithInterval returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='by linear mapping' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLinearDataConversionWithIntervalAccess().getByLinearMappingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionWithIntervalAccess().getFromIntervalIntervalParserRuleCall_1_0()); 
	    }
		lv_fromInterval_1_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionWithIntervalRule());
	        }
       		set(
       			$current, 
       			"fromInterval",
        		lv_fromInterval_1_0, 
        		"de.fzi.sensidl.language.Sensidl.Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLinearDataConversionWithIntervalAccess().getEqualsSignGreaterThanSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionWithIntervalAccess().getToIntervalIntervalParserRuleCall_3_0()); 
	    }
		lv_toInterval_3_0=ruleInterval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionWithIntervalRule());
	        }
       		set(
       			$current, 
       			"toInterval",
        		lv_toInterval_3_0, 
        		"de.fzi.sensidl.language.Sensidl.Interval");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='as' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinearDataConversionWithIntervalAccess().getAsKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinearDataConversionWithIntervalAccess().getDataTypeDataTypeEnumRuleCall_5_0()); 
	    }
		lv_dataType_5_0=ruleDataType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinearDataConversionWithIntervalRule());
	        }
       		set(
       			$current, 
       			"dataType",
        		lv_dataType_5_0, 
        		"de.fzi.sensidl.language.Sensidl.DataType");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleDOUBLE
entryRuleDOUBLE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDOUBLERule()); } 
	 iv_ruleDOUBLE=ruleDOUBLE 
	 { $current=$iv_ruleDOUBLE.current.getText(); }  
	 EOF 
;

// Rule DOUBLE
ruleDOUBLE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_1()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDOUBLEAccess().getFullStopKeyword_2_0()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getDOUBLEAccess().getINTTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleUNIT
entryRuleUNIT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUNITRule()); } 
	 iv_ruleUNIT=ruleUNIT 
	 { $current=$iv_ruleUNIT.current.getText(); }  
	 EOF 
;

// Rule UNIT
ruleUNIT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getUNITAccess().getIDTerminalRuleCall_0()); 
    }
)*(    this_ANY_OTHER_1=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_1);
    }

    { 
    newLeafNode(this_ANY_OTHER_1, grammarAccess.getUNITAccess().getANY_OTHERTerminalRuleCall_1_0()); 
    }
(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getUNITAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)*)
    ;





// Rule Coding
ruleCoding returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='SENSIDL_BINARY' 
	{
        $current = grammarAccess.getCodingAccess().getSENSIDL_BINARYEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getCodingAccess().getSENSIDL_BINARYEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='SENSIDL_JSON' 
	{
        $current = grammarAccess.getCodingAccess().getSENSIDL_JSONEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getCodingAccess().getSENSIDL_JSONEnumLiteralDeclaration_1()); 
    }
));



// Rule Endianness
ruleEndianness returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='BIG_ENDIAN' 
	{
        $current = grammarAccess.getEndiannessAccess().getBIG_ENDIANEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getEndiannessAccess().getBIG_ENDIANEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='LITTLE_ENDIAN' 
	{
        $current = grammarAccess.getEndiannessAccess().getLITTLE_ENDIANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getEndiannessAccess().getLITTLE_ENDIANEnumLiteralDeclaration_1()); 
    }
));



// Rule DataTypeNotAdjustable
ruleDataTypeNotAdjustable returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='STRING' 
	{
        $current = grammarAccess.getDataTypeNotAdjustableAccess().getSTRINGEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeNotAdjustableAccess().getSTRINGEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='BOOLEAN' 
	{
        $current = grammarAccess.getDataTypeNotAdjustableAccess().getBOOLEANEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeNotAdjustableAccess().getBOOLEANEnumLiteralDeclaration_1()); 
    }
));



// Rule DataType
ruleDataType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='INT8' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT8EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getINT8EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='UINT8' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT8EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getUINT8EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='INT16' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT16EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getDataTypeAccess().getINT16EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='UINT16' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT16EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getDataTypeAccess().getUINT16EnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='INT32' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT32EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getDataTypeAccess().getINT32EnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='UINT32' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT32EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getDataTypeAccess().getUINT32EnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='INT64' 
	{
        $current = grammarAccess.getDataTypeAccess().getINT64EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getDataTypeAccess().getINT64EnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='UINT64' 
	{
        $current = grammarAccess.getDataTypeAccess().getUINT64EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getDataTypeAccess().getUINT64EnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='FLOAT' 
	{
        $current = grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='DOUBLE' 
	{
        $current = grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getDataTypeAccess().getDOUBLEEnumLiteralDeclaration_9()); 
    }
));



RULE_ML_COMMENT : '/*' ~('*') ( options {greedy=false;} : . )*'*/';

RULE_DESCRIPTION : '/**' ( options {greedy=false;} : . )*'*/';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


