/*
 * generated by Xtext
 */
package de.fzi.sensidl.language.generator

import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import com.google.inject.Inject
import de.fzi.sensidl.language.SensidlRuntimeModule
import de.fzi.sensidl.design.sensidl.SensorInterface

/**
 * Der Generator für SensIDL.
 * <p>
 * Stößt nacheinander zwei Generatoren an:
 * <ol>
 *   <li>{@link EcorePersistenceHelper} - persistiert das Modell.</li>
 *   <li>{@link SensidlPseudoCodeGenerator} - erzeugt Pseudocode für das Modell.</li>
 * </ol>
 * @author Dominik Werle
 */
class SensidlGenerator implements IGenerator {
	/**
	 * Der Pseudocodegenerator, wird durch Guice gebunden.
	 * @see SensidlRuntimeModule
	 */
	@Inject private SensidlPseudoCodeGenerator codeGenerator
	
	private static String EXTENSION = "sidlecore"
	
	/**
	 * Der Einstiegspunkt für den Generator für SensIDL.
	 * <p>
	 * Stößt nacheinander zwei Generatoren an:
	 * <ol>
	 *   <li>{@link EcorePersistenceHelper} - persistiert das Modell.</li>
	 *   <li>{@link SensidlPseudoCodeGenerator} - erzeugt Pseudocode für das Modell.</li>
	 * </ol>
	 * @param resource die zu verarbeitende Resource
	 * @param fsa Dateizugriff für die Dateigeneration
	 */
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		new JavaGenerator(resource, fsa).generate //starts the Java Code Generator
		
		val dataModel = resource
			.contents
			.filter(SensorInterface)
			.head
			
		if (dataModel == null)
			return
			
		val fileNameBase = resource.URI.trimQuery.trimFragment.trimFileExtension.lastSegment
		val fileName = fileNameBase + "." + EXTENSION
		
		EcorePersistenceHelper.persistEcoreModel(dataModel, URI.createURI(fileName), fsa)
		codeGenerator.doGenerate(dataModel, resource.URI, fsa)
	}
}
