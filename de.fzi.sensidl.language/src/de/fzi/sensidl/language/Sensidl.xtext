/**
 * Die Grammatik für die SensIDL-Sprache.
 * Das zugehörige Metamodell kann unter de.fzi.sensidl.design/models/sensIDL.ecore
 * gefunden werden.
 * @author Dominik Werle
 */

grammar de.fzi.sensidl.language.Sensidl with org.eclipse.xtext.common.Terminals

// use a manually specified metamodel instead of generating one from the Xtext grammar
import "platform:/resource/de.fzi.sensidl.design/models/sensIDL.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

DataModel:
	"options" "{"
		options=Options
	"}"
	
	(
		(representations += Representation) |
	 	(interpretations += Interpretation)
	)*
	
	"transmit" transmit+=[Interpretation]
		("," transmit+=[Interpretation])*
;

Options:
	{Options}
	(
		("transmission" "type" ":" transmissionType=Transmission) |
		("sensor" "language" ":" sensorLanguage=GenerationLanguage) |
		("receiver" "language" ":" receiverLanguage=GenerationLanguage)
	)*
;

Transmission:
	Pull |
	Push
;

Push:
	"push"
	"with" methodName = ID
;

Pull:
	(TimeDivisionMultiplexing) |
	"pull"
	"with" "Frequency" ":" frequency=INT
;

TimeDivisionMultiplexing:
	"timeDivisionMultiplexing"
	"with" "Frequency" ":" frequency=INT
	"and" "Duration" ":" duration=DOUBLE
	"and" "timeSlot" ":" timeSlot=DOUBLE
;

enum GenerationLanguage:
	JAVA | CPP | C
;

Representation:
	("repr" | "representation") name=ID
	"is" type=Type
	"by" byteCount=INT ("bytes" | "byte") 
;

Interpretation:
	Constant |
	PrimitiveInterpretation |
	Measurement |
	InterpretationGroup |
	Calculated
;

Calculated:
	("calculate" | "calculated")
	name=ID
	"as" representation=[Representation]
	"by" methodName=ID ("," methodNameOut=ID)?
	"with" parameter+=Parameter ("," parameter+=Parameter)*
;

Parameter:
	"("
		interpretation=[Interpretation]
		("as" argumentType=ArgumentType)?
	")"
;

InterpretationGroup:
	"group" name=ID "{"
		(interpretations+=Interpretation)*
	"}"
;

/*
 * Einheiten noch als String
 */
Measurement:
	"measurement" "of"
	quantity=Quantity
	name=ID
	"in" (scale=DOUBLE)? unit=STRING
	"as" representation=[Representation]
	(constraints+=MeasurementConstraint)*
;

MeasurementConstraint:
	MeasurementInRange |
	MeasurementAdaption
;

MeasurementInRange:
	"from" lowerBound=Measure
	"to" upperBound=Measure
;

MeasurementAdaption:
	"with" "scaling factor" ":" scalingFactor=DOUBLE
	"and" "offset" ":" offset=DOUBLE 
;


/*
 * Einheiten noch als String
 */
Measure:
	value=DOUBLE unit=STRING
;


PrimitiveInterpretation:
	"primitive" type=Type name=ID
	"as" representation=[Representation]
;

Constant:
	"constant" name=ID
	"as" representation=[Representation]
	"is" constantValue=STRING
;

DOUBLE returns ecore::EDouble: INT ('.' INT)?;

/*
 * Die EEnums und EEnumLiterals können direkt so ausgedrückt werden.
 */
enum ArgumentType:
	BYTE_ARRAY 
;

enum Quantity:
	FLOW | TEMPERATURE | VOLUME | DURATION | PRESSURE
;

enum Type:
	BYTE | SHORT | INT | LONG | FLOAT | DOUBLE
;