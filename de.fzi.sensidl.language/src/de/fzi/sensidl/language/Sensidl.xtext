/**
 * Die Grammatik für die SensIDL-Sprache.
 * Das zugehörige Metamodell kann unter de.fzi.sensidl.design/model/sensIDL.ecore
 * gefunden werden.
 * @author Dominik Werle
 * @author Max Scheerer
 * @author Emre Taspolatoglu
 * @author Sven Eckhardt
 * @author Max Peters
 * @author Fabian Scheytt
 * 
 */

grammar de.fzi.sensidl.language.Sensidl with org.eclipse.xtext.common.Terminals 

// use a manually specified metamodel instead of generating one from the Xtext grammar
// import "platform:/resource/de.fzi.sensidl.design/model/sensIDL.ecore" as sensidl
import "http://www.eclipse.org/emf/2002/Ecore" as ecore 
import "http://fzi.de/sensidl/design/1.0" as sensidl
import "http://fzi.de/sensidl/design/representation/1.0" as dataRepresentation


SensorInterface returns sensidl::SensorInterface: 
	"sensorInterface" name=ID (description=DESCRIPTION)? ("with identifier" ":" ID=STRING)? "{"
		encodingSettings=EncodingSettings
		dataDescription=SensorDataDescription
	"}"
;

EncodingSettings returns sensidl::EncodingSettings: 
	"encoding" ":" coding=Coding "," "endianness" ":" endianness=Endianness "," "alignment" ":" alignment=INT "BIT" ("with identifier" ":" ID=STRING)? 
;

enum Coding returns sensidl::Coding:
	SENSIDL_BINARY | SENSIDL_JSON
;

enum Endianness returns sensidl::Endianness:
	BIG_ENDIAN | LITTLE_ENDIAN
;

SensorDataDescription returns dataRepresentation::SensorDataDescription: 
	"sensorData" {dataRepresentation::SensorDataDescription} ("with identifier" ":" ID=STRING)? "{"
		(dataSets+=DataSet)*
	"}"
;

DataSet returns dataRepresentation::DataSet:
	"dataSet" name=ID ("uses" parentDataSet=[dataRepresentation::DataSet])? ("with identifier" ":" ID=STRING)? (description=DESCRIPTION)? "{"
		(data+=Data)* 
	"}"
;

Data returns dataRepresentation::Data:
	MeasurementData |
	NonMeasurementData |
	MeasurementDataNotAdjustable
;

MeasurementData returns dataRepresentation::MeasurementData:
	name=ID "as" dataType=DataType "in" unit=UNIT ("with identifier" ":" ID=STRING)?
	("adjusted" adjustments+=DataAdjustment ("," adjustments+=DataAdjustment)*)? (description=DESCRIPTION)?
;

NonMeasurementData returns dataRepresentation::NonMeasurementData:
	 name=ID "as" (dataType=DataType|dataType=DataTypeNotAdjustable) (constant?='constant')? ("value" "=" value=STRING)? ("with identifier" ":" ID=STRING)? (description=DESCRIPTION)?
;

MeasurementDataNotAdjustable returns dataRepresentation::MeasurementData:
	name=ID "as" dataType=DataTypeNotAdjustable "in" unit=UNIT ("with identifier" ":" ID=STRING)? (description=DESCRIPTION)?
;

enum DataTypeNotAdjustable returns dataRepresentation::DataType: 
	STRING
;

enum DataType returns dataRepresentation::DataType:
	INT8 |
	UINT8 |
	INT16 |
	UINT16 |
	INT32 |
	UINT32 |
	INT64 |
	UINT64 |
	FLOAT |
	DOUBLE |
	BOOLEAN
;

DataAdjustment returns dataRepresentation::DataAdjustment:
	DataRange |
	DataConversion
;

DataRange returns dataRepresentation::DataRange:
	"with range" range=Interval
;

Interval returns dataRepresentation::Interval:
	"["lowerBound=DOUBLE";"upperBound=DOUBLE"]"
;

DataConversion returns dataRepresentation::DataConversion:
	LinearDataConversion |
	LinearDataConversionWithInterval
;

LinearDataConversion returns dataRepresentation::LinearDataConversion:	
	(
		"with scaling factor" ":" scalingFactor=DOUBLE "and offset" ":"offset=DOUBLE  
	)
;

LinearDataConversionWithInterval returns dataRepresentation::LinearDataConversionWithInterval: 
	(
		"by linear mapping"  fromInterval=Interval "=>" toInterval=Interval "as" dataType=DataType
	)
;

DOUBLE returns ecore::EDouble: INT ('.' INT)?;
//BOOLEAN returns ecore::EBoolean: 'true' | 'false';
//UNIT returns dataRepresentation::Unit: STRING;
//terminal UNIT returns dataRepresentation::Unit : '^'?('a'..'z'|'A'..'Z'/**'_'*/) ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

UNIT returns dataRepresentation::Unit:
	ID* ((ANY_OTHER) ID*)*
;

terminal ML_COMMENT: '/*'!('*') -> '*/'; // multi-line comments can't start with '/**'

terminal DESCRIPTION: '/**' ->  '*/' ; 